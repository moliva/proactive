<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="OSGi"><info><title xml:id="ProActiveontopofOSGi_73">ProActive on top of OSGi</title></info>


  <section xml:id="OSGi_html_overview"><info><title xml:id="OverviewofOSGiOpenServicesGatewayinitiative_73">Overview of OSGi &mdash; Open Services Gateway initiative</title></info>


    <para><emphasis role="bold">OSGi</emphasis> is a corporation that works on
    the definition and promotion of open specifications. These specifications
    mainly aim at packaging and delivering services among all kinds of
    networks.</para>

    <para><emphasis><emphasis role="bold">OSGi
    Framework</emphasis></emphasis></para>

    <para>The OSGi specification defines <emphasis role="bold">a
    framework</emphasis> that allows a diversity of services to be executed
    in a service gateway. Thus, many applications can <emphasis role="bold">share a single JVM</emphasis>.</para>

    <figure xml:id="TheOSGiframeworkentities_73"><info><title>The OSGi framework entities</title></info>
      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/framework.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <indexterm><primary>Bundles</primary><secondary>OSGI</secondary></indexterm>

    <para><emphasis><emphasis role="bold">Bundles</emphasis></emphasis></para>

    <para>In order to be <emphasis role="bold">delivered and
    deployed</emphasis> on OSGi, each piece of code is packaged into bundles.
    Bundles are functional entities offering <emphasis role="bold">services
    and packages</emphasis>. They can be delivered dynamically to the
    framework. Concretely, a bundle is a Java jar file containing:</para>

    <itemizedlist>
      <listitem>
        <para>The application classes, including the so-called bundle
        <emphasis>Activator</emphasis>.</para>
      </listitem>

      <listitem>
        <para>The <emphasis>Manifest file</emphasis> that specifies properties
        about the application. For instance, this <emphasis>Manifest file</emphasis>
        specifies the bundle Activator and
        packages which are required by the application.</para>
      </listitem>

      <listitem>
        <para>Other resources the application could need (images, native
        libraries, or data files...).</para>
      </listitem>
    </itemizedlist>

    <indexterm><primary>Kill</primary><secondary>bundles</secondary></indexterm>

    <para>Bundles can be plugged dynamically and their so-called
    <emphasis>lifecycle</emphasis> can be managed through the framework
    (start, stop, update...).</para>

    <para><emphasis><emphasis role="bold">Manifest
    file</emphasis></emphasis></para>

    <para>This important file contains crucial parameters for the bundle.
    It specifies which Activator (entry point) the bundle has to use, the
    bundle classpath, the imported and exported packages and so on...</para>

    <para><emphasis><emphasis role="bold">Services</emphasis></emphasis></para>

    <para>Bundles communicates with each other thanks to <emphasis role="bold">services and packages sharing</emphasis>.
    A <emphasis role="bold">service</emphasis> is an object registered into the framework
    in order to be used by other applications. The definition of a service is
    specified in a Java interface. OSGi specifies a set of standard services
    like Http Service, Log Service...</para>

    <para>We currently use the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://felix.apache.org/site/index.html">Apache Felix</link> implementation.
    For more information on OSGi, please visit the
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.osgi.org">OSGi</link> website.</para>
  </section>

  <section xml:id="OSGi_html_proactiveBundle"><info><title xml:id="ProActivebundleandservice_73">ProActive bundle and service</title></info>


    <para>In order to use ProActive on top of OSGi, we have developed the
    <emphasis role="bold">ProActive Bundle</emphasis> that contains all
    classes required to launch a ProActive runtime.</para>

    <para>The <emphasis role="bold">ProActive bundle offers a
    service</emphasis>, the <emphasis>ProActiveService</emphasis> that has
    almost the same interface that the ProActive static class. When
    installed, the ProActive bundle starts a new runtime, and clients that use
    the ProActive Service will be able to create active object on this
    runtime.</para>

    <figure xml:id="TheProactiveBundleusesthestandardHttpService_73"><info><title>The Proactive Bundle uses the standard Http Service</title></info>


      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/proactive_bundle.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The active object will be accessible remotely from any java
    application, or any other OSGi gateway. The communication can be either
    <emphasis>rmi</emphasis> or <emphasis>http</emphasis>. In case of using
    http, the ProActive bundle requires the installation of the <emphasis role="bold">Http Service</emphasis> that will handle http communications
    through a Servlet. We show in the example section how to use the ProActive
    service.</para>
  </section>

  <section xml:id="OSGi_html_helloWorld"><info><title xml:id="YetanotherHelloWorld_73">Yet another Hello World</title></info>


    <para>The example below is <emphasis role="bold">a simple hello world that
    uses ProActive Service</emphasis>. It creates an Hello active Object and
    registers it as a service. We reuse the basic hello example provided within the ProActive's examples. We have to write a <emphasis role="bold">bundle
    Activator</emphasis> that will create the active object and register it as
    a OSGi service.</para>

    <para>The HelloActivator has to implements the BundleActivator
    interface.</para>

    <programlisting language="java"><textobject><textdata fileref="automatic_snippets/HelloActivator_1.snip" /></textobject></programlisting>

    <para>The <literal>start()</literal> method is the one executed when the
    bundle starts. When the hello bundle starts, we need to get the reference to
    the ProActive service and use it. Once we have the reference, we can
    create our active objects thanks to the
    <literal>ProActiveService.newActive()</literal> method.
	In this example, we use this method to create two active objects: One <literal>HelloSystemOut</literal> object and one <literal>HelloLogInfo</literal> object.
	This two classes implement the <literal>HelloService</literal> class which defines two methods: <literal>sayHello()</literal> and <literal>saySomething(String something)</literal>.
	Finally, we register these two objects as a <literal>HelloService</literal> with two different <literal>out</literal> properties that will enable us to differentiate them.</para>

    <programlisting language="java"><textobject><textdata fileref="automatic_snippets/HelloActivator_2.snip" /></textobject></programlisting>

    <para>Now that we have created the hello active service,
    we have to <emphasis role="bold">package the application</emphasis> into a bundle. First of
    all, we have to write a <emphasis role="bold">Manifest File</emphasis>
    where we specify:</para>

    <itemizedlist>
      <listitem>
        <para>The name of the bundle: <literal>Hello World ProActive
        Service</literal></para>
      </listitem>
      <listitem>
        <para>The symbolic name of the bundle (required by felix): <literal>Hello World ProActive
        Service</literal></para>
      </listitem>

      <listitem>
        <para>The class of the Activator:
        <literal>org.objectweb.proactive.examples.osgi.hello.HelloActivator</literal></para>
      </listitem>

      <listitem>
        <para>The packages our application requires:
        <literal>org.objectweb.proactive...</literal></para>
      </listitem>

      <listitem>
        <para>The packages our application exports:
        org.objectweb.proactive.examples.osgi.hello</para>
      </listitem>

      <listitem>
        <para>We can also specify other information like author, version, description, ...</para>
      </listitem>
    </itemizedlist>

    <para>Here is how the Manifest looks like:</para>

    <programlisting language="java"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/osgi/hello/Manifest/Manifest.mf" /></textobject></programlisting>

    <para><emphasis><emphasis role="bold">Installing the ProActive Bundle and
    the Hello Bundle.</emphasis></emphasis></para>

    <para>In order to run the example, you need to install an OSGi framework. Proactive uses felix as an OSGi framework but you can choose another one.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Generation of the ProActive Bundle as well as other required bundles</emphasis></para>

        <para>The proActiveBundle is the jar archive created when deploying ProActive. Yet, this bundle requires the  <literal>librariesBundle</literal> which encompasses packages needed by ProActive.
		To generate these bundles, you have to go to your <literal>$PROACTIVE_HOME/compile</literal> and type:
        </para>

        <screen>./build deploy librariesBundle</screen>

		<para>or, if you want to directly create all the ProActive bundles that you may need latter on, type:</para>

        <screen>./build OSGiBundles</screen>

        <para>The ProActive bundle jar file will be generated in <emphasis role="bold"><literal>$PROACTIVE_HOME/dist/lib/ProActive.jar</literal></emphasis>
        and all the other bundles will be generated in the <emphasis role="bold"><literal>$PROACTIVE_HOME/dist/bundle/</literal></emphasis> directory.
        </para>

		<para>In order to start the Felix framework with the ProActive and the libraries bundles started, the simplest way is to go to the <emphasis role="bold"><literal>$PROACTIVE_HOME/examples/osgi</literal></emphasis> directory
		and launch the <literal>felix.[sh|bat]</literal>script. This script will launch felix with the appropriate arguments and it will automatically start the ProActive and the libraries bundles. 
		It will also try to start the ProActive connector bundle as well as the JMX remote management bundle (see below for more information on these bundle). You may have some errors if you have not used the second build target 
		(<literal>./build OSGiBundles</literal>). This is normal since these two bundles have not been built but it should not pose a problem for the following. 
		</para>

        <screen>felix.[sh|bat]</screen>
      </listitem>

      <listitem>
        <para><emphasis>Generation of the Hello World example
        bundle and its client bundle</emphasis></para>

        <para>To generate the Hello World bundle as well as its client bundle, you have to go to your <literal>$PROACTIVE_HOME/compile</literal> and type:
        </para>

        <screen>./build OSGiBundles</screen>

        <para>The bundle jar files will be generated in the <emphasis role="bold"><literal>$PROACTIVE_DIR/dist/bundle/</literal></emphasis>
        directory.</para>
      </listitem>

      <listitem>
        <para><emphasis>Installation and starting of the Hello World example
        bundle</emphasis></para>

		<para>We need now to install and start the hello bundle into the OSGi
        Framework:</para>

        <screen>--&gt; start file:./../../dist/bundle/helloBundle.jar</screen>

        <para>The command will install and start the Hello active service. The
        hello service is now an OSGi service and can be accessed
        remotely.</para>
      </listitem>

      <listitem>
        <para><emphasis>Installation and starting of the Hello World Client example
        bundle</emphasis></para>
        <para>The helloClientBundle shows you how to use the services registered by the helloBundle. Here is its Activator and its manifest file:</para>

		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/HelloClientActivator_1.snip" /></textobject></programlisting>

		<programlisting language="java"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/osgi/hello/Manifest/Manifest.mf" /></textobject></programlisting>

		<para>You can install it and start it into your framework typing:</para>
        <screen>--&gt; start file:./../../dist/bundle/helloClientBundle.jar</screen>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="OSGi_html_futureWorks"><info><title>
     Current and Future works</title></info>


    <itemizedlist>
      <listitem>
        <para>We are working on a management application that remotely
        monitors and manages a large number of OSGi gateways. It uses standard
        Management API such as JMX ( Java Management eXtension). We are
        writing a ProActive Connector in order to access these JMX enabled
        gateways and uses Group Communications to handle large scale.
        Moreover, this application will be graphically written as an Eclipse
        plugin.</para>
      </listitem>

      <listitem>
        <para>We plan to deploy remotely active objects and fractal components
        on OSGi gateways.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
