<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="BranchAndBound"><info><title xml:id="BranchandBoundAPI_5">Branch and Bound API</title></info>

    <section xml:id="bnb_overview"><info><title xml:id="Overview_5">Overview</title></info>

        <para>
            The Branch and Bound (BnB) consists in an algorithmic
            technique for exploring a solution tree from which returns
            the optimal solution.
        </para>
        <para>
            The main goal of this BnB API is to provide a set of tools
            for helping the developers to parallelize his BnB problem
            implementation.
        </para>
        <para>The main features are:</para>
        <itemizedlist>
            <listitem>
                <para>Hiding computation distribution.</para>
            </listitem>
            <listitem>
                <para>Dynamic task splitting.</para>
            </listitem>
            <listitem>
                <para>Automatic solution gathering.</para>
            </listitem>
            <listitem>
                <para>
                    Task communications for broadcasting the best current
                    solution.
                </para>
            </listitem>
            <listitem>
                <para>
                    Different behaviors for task allocation, provided by
                    the API or on your own.
                </para>
            </listitem>
            <listitem>
                <para>Open API for extensions.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section xml:id="bnb_model"><info><title xml:id="TheModelArchitecture_5">The Model Architecture</title></info>

        <para>The following figure shows the API architecture:</para>
        <para>
            <figure xml:id="TheAPIarchitecture_5"><info><title>The API architecture</title></info>

                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/bnb_api_archi.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>The API active objects are:</para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Manager</emphasis>:
                    the main point of the API. It is the master for
                    deploying and managing Workers. Also, it attributes
                    Tasks to free workers. The Tasks are provided by the
                    Task Queue.
                </para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>Queue</primary>
                    <secondary>Task Queue</secondary>
                </indexterm>
                <para>
                    <emphasis role="bold">Task Queue</emphasis>:
                    provides Task in a specific order to the Manager.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Worker</emphasis>:
                    broadcasts the solution to all Tasks, and provides the
                    API environment to the Tasks.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Task</emphasis>:
                    the user code to compute.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            All Workers have a group reference on all the others. The
            figure hereafter shows step by step how a Task can share a new
            better solution with all others:
        </para>
        <para>
            <figure xml:id="Broadcastinganewsolution_5"><info><title>Broadcasting a new solution</title></info>

                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/bnb_api_com.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>Finally, here is the order execution of methods:</para>
        <orderedlist>
            <listitem>
                <para>
                    rootTask.initLowerBound(); // compute a first lower bound
                </para>
            </listitem>
            <listitem>
                <para>
                    rootTask.initUpperBound(); // compute a first upper bound
                </para>
            </listitem>
            <listitem>
                <para>
                    Vector splitted = rootTask.split(); // generate a set of tasks
                </para>
            </listitem>
            <listitem>
                <para>for i in splitted do in parallel</para>
                <para>splitted[i].initLowerBound();</para>
                <para>splitted[i].initUpperBound();</para>
                <para>Result ri = splitted.execute()</para>
            </listitem>
            <listitem>
                <para>
                    Result final = rootTask.gather(Result[] ri); // gather all result
                </para>
            </listitem>
        </orderedlist>
        <para>
            Keep in mind that is only 'initLower/UpperBound' and 'split'
            methods are called on the root task. The 'execute' method is
            called on the root task's splitted task.
        </para>
    </section>
    <section xml:id="bnb_api"><info><title xml:id="TheAPIDetails_5">The API Details</title></info>

        <section xml:id="TheTaskDescription_5"><info><title>The Task Description</title></info>

            <para>
                The
                <emphasis role="bold">Task</emphasis>
                object is located in this followed package:
            </para>
            <screen>org.objectweb.proactive.extra.branchnbound.core</screen>
            <para>All methods are described bellow:</para>
            <section xml:id="publicResultexecute_5"><info><title>public Result execute()</title></info>

                <para>
                    It is the place where the user has to put his code
                    for solving a part and/or the totality of his BnB
                    problem. There are 2 main usages of it. The first
                    one consists in dividing the task and returning no
                    result. The second is to try to improve the best
                    solution.
                </para>
            </section>
            <section xml:id="publicVectorsplit_5"><info><title>public Vector&lt;Task&gt; split()</title></info>

                <para>
                    This is for helping the user when he wants to divide
                    a task. In a future work we have planned to use this
                    method in an automatic way.
                </para>
            </section>
            <section xml:id="publicvoidinitLowerBound_5"><info><title>public void initLowerBound()</title></info>

                <para>Initialize a lower bound local to the task.</para>
            </section>
            <section xml:id="publicvoidinitUpperBound_5"><info><title>public void initUpperBound()</title></info>

                <para>Initialize a upper bound local to the task.</para>
            </section>
            <section xml:id="publicResultgatherResultresults_5"><info><title>public Result gather(Result[] results)</title></info>

                <para>
                    The default behavior is to return the smallest
                    Result gave by the compareTo method. That's why it
                    is also recommended to override the
                    <emphasis role="bold">compareTo(Object)</emphasis>
                    method.
                </para>
                <para>
                    Some instance variables are provided by the API to help
                    the user for keeping a code clear. See next their
                    descriptions:
                </para>
                <programlisting language="java">protected Result initLowerBound; // to store the lower bound
protected Result initUpperBound; // to store the upper bound
protected Object bestKnownSolution; // setted automaticaly by the API with the best current solution
protected Worker worker; // to interact with the API (see after)</programlisting>
                <para>
                    From the Task, specially within the <literal>execute()</literal> method,
                    the user has to interact with the API for sending to the
                    task queue sub-tasks resulting from a split call,
					or for broadcasting to other tasks a new
                    better solution, etc.
                </para>
                <para>
                    The way to do that is to use the <emphasis role="bold">worker</emphasis> instance variable:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            Broadcasting a new better solution to all
                            the other workers:
                        </para>
                        <programlisting language="java">this.worker.setBestCurrentResult(newBetterSolution);</programlisting>
                    </listitem>
                    <listitem>
                        <para>
                            Sending a set of sub-tasks for computing:
                        </para>
                        <programlisting language="java">this.worker.sendSubTasksToTheManager(subTaskVector);</programlisting>
                    </listitem>
                    <listitem>
                        <para>
                            For a smarter split, checking that the task
                            queue needs more tasks:
                        </para>
                        <programlisting language="java">BooleanWrapper workersAvailable = this.worker.isHungry();</programlisting>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section xml:id="TheTaskQueueDescription_5"><info><title>The Task Queue Description</title></info>

            <para>
                The Task Queue manages the task allocation. The main functions
                are: providing tasks in a special order and keeping
                results back.
            </para>
            <para>
                For the moment, there are 2 different queue types
                provided by the API:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">BasicQueueImpl:</emphasis>
                        provides tasks in FIFO order.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">LargerQueueImpl</emphasis>:
                        provides tasks in a larger order, as Breadth
                        First Search algorithm.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                By extending the
                <emphasis role="bold">TaskQueue</emphasis> abstract class,
                you can use a specialized task allocator for your need.
            </para>
        </section>
        <section xml:id="TheProActiveBranchNBoundDescription_5"><info><title>The ProActiveBranchNBound Description</title></info>

            <para>
                Finally, it is the main entry point for starting and
                controlling your computation.
            </para>
            <programlisting language="java">Task task = new YourTask(someArguments);
Manager manager =  ProActiveBranchNBound.newBnB(task,
                        nodes,
                        LargerQueueImpl.class.getName());
Result futureResult = manager.start(); // this call is asynchronous</programlisting>
            <tip>
				<title>
					Use the constructor
					<emphasis role="bold">
						ProActiveBranchNBound.newBnB(Task, VirtualNode[],
						String)
					</emphasis>
					and
					<emphasis role="bold">do not activate</emphasis>
					virtual nodes
				</title>
			<para>
                This method provides a faster deployment
                and active objects creation way. Communications between
                workers are also optimized by a hierarchic group based
                on the array of virtual nodes. That means when it is
                possible, define a virtual node by clusters.
            </para>
			</tip>
        </section>
    </section>
    <section xml:id="bnb_flowshop"><info><title xml:id="AnExampleFlowShop_5">An Example: FlowShop</title></info>

        <indexterm>
            <primary>Flowshop</primary>
        </indexterm>
        <para>
            This example solves the permutation flowshop scheduling
            problem, with the monoobjective case. The main objective is
            to minimized the overall completion time for all the jobs,
            i.e. makespan. A flowshop problem can be represented as a
            set of n jobs; this jobs have to be scheduled on a set of m
            machines. Each jobs is defined by a set of m distinct
            operations. The goal consists to determine the sequence used
            for all machines to execute operations.
        </para>
        <para>
            The algorithm used to find the best solution, tests all
            permutations and try to cut bad branches is the following one:
        </para>
        <para>
            First, the
            <emphasis role="bold">Flowshop Task</emphasis>:
        </para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/FlowShop_1.snip" /></textobject></programlisting>
        <para>Now, implement all Task abstract methods.</para>
        <para>
            Computation
            <emphasis role="bold">bound</emphasis>
            methods:
        </para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/FlowShop_2.snip" /></textobject></programlisting>
        <para>
            The
            <emphasis role="bold">split</emphasis>
            method:
        </para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/FlowShop_3.snip" /></textobject></programlisting>
        <para>
            Then, the
            <emphasis role="bold">execute</emphasis>
            method:
        </para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/FlowShop_4.snip" /></textobject></programlisting>
        <para>
            This example is available in a complete version in the
			<literal>Proactive/src/Example/org/objectweb/proactive/examples/flowshop/</literal> directory.
        </para>
    </section>
    <section xml:id="bnb_future_work"><info><title xml:id="FutureWork_5">Future Work</title></info>

        <itemizedlist>
            <listitem>
                <para>An auto-dynamic task splitting mechanism.</para>
            </listitem>
            <listitem>
                <para>Providing more queues for task allocation.</para>
            </listitem>
            <listitem>
                <para>
                    A new task interface for wrapping native code.
                </para>
            </listitem>
        </itemizedlist>
    </section>
</chapter>
