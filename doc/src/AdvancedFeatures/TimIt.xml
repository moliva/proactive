<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="TimIt"><info><title>TimIt API</title></info>

    <indexterm>
        <primary>TimIt</primary>
    </indexterm>
    <section xml:id="Overview"><info><title>Overview</title></info>
        <para>
            TimIt offers a complete solution to benchmark an application.
            It is an API which provides some advanced timing and event
            observing services. Benchmarking your ProActive application
            will permit you to enhance performance of it. Thanks to
            <emphasis>generated statistics charts</emphasis>,
            you will be able to determine critical points of your
            application.
        </para>
        <para>
            TimIt is best suited for SPMD applications. Using TimIt for other purposes is not recommended but possible.
            All TimIt SPMD classes are located in <emphasis>org.objectweb.proactive.extensions.timitspmd</emphasis> package
            in the ProActive sources folder.
        </para>
        <para>
            Different kind of statistics can be collected. You can setup
            different timers with
            <emphasis>hierarchical capabilities</emphasis>
            and see them in charts. For instance, event observers can be used to
            study communication pattern between your
            application's workers.
        </para>
        <para>
            TimIt generates charts and results XML file, with exact
            timing and event observers values. Here are some examples of
            charts and XML files generated by TimIt:
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/chartsExamples.png" format="PNG"/>
                </imageobject>
            </mediaobject>
            <programlisting language="xml">&lt;timit&gt;
  &lt;FinalStatistics name="Example2 4" runs="10" timeoutErrors="0"
                   date="2006-11-05 10:46:56.742"&gt;

    &lt;timers&gt;
      &lt;timer name="total"
             min="2095.0" avg="2191.250" max="2357.0" dev="1.603" sum="2187.750"&gt;
        &lt;timer name="work"
               min="1453.0" avg="1466.000" max="1473.0" dev="0.951" sum="0.000" /&gt;
        &lt;timer name="init"
               min="147.0" avg="175.250" max="205.0" dev="2.932" sum="0.000" /&gt;
        &lt;timer name="end"
               min="467.0" avg="546.500" max="679.0" dev="1.439" sum="0.000" /&gt;
      &lt;/timer&gt;
    &lt;/timers&gt;

    &lt;events&gt;
      &lt;event name="nbComms" min="92.000" avg="92.000" max="92.000" dev="0.000" /&gt;
      &lt;event name="commPattern" value="Too complex value, first run shown"&gt;.
10  0 13  0
 0 13  0 10
13  0 10  0
 0 10  0 13
      &lt;/event&gt;
      &lt;event name="densityPattern" value="Too complex value, first run shown"&gt;.
  20    0 2080    0
   0 2080    0   20
2080    0   20    0
   0   20    0 2080
      &lt;/event&gt;
    &lt;/events&gt;


    &lt;informations&gt;
      &lt;deployer jvm="Java HotSpot(TM) Client VM 1.5.0_06-64 - Version 1.5.0_06"
                os="ppc Mac OS X 10.4.8" processors="1" /&gt;
    &lt;/informations&gt;


  &lt;/FinalStatistics&gt;

&lt;/timit&gt;</programlisting>
        </para>
    </section>
    <section xml:id="Quickstart"><info><title>Quick start</title></info>

        <section xml:id="QuickStartIntroduction"><info><title>Introduction</title></info>
			<para>
				In order to use TimIt, you first have to create a configuration file as explained in <xref linkend="DefineyourTimItconfigurationfile" />.
				This configuration file is used to describe the application to be launched as well as outputs you wants (reports and charts).
				This file will then be used as an argument of the TimIt main method:
			</para>
			<screen>java org.objectweb.proactive.extensions.timitspmd.TimIt -c configuration_file.xml</screen>
		</section>
        <section xml:id="DefineyourTimItconfigurationfile"><info><title>Define your TimIt configuration file</title></info>

            <para>
                Configuring TimIt is done through an XML configuration
                file which is axed around four major tags:
            </para>
            <section xml:id="Globalvariablesdefinition"><info><title>Global variables definition</title></info>

                <para>
                    This part sets variables which can be used both
                    inside this file as you can see in next parts, but
                    also in
                    <emphasis>ProActive</emphasis>
                    descriptor file.
                </para>
                <para>
                    TimIt offers a nice tool to deal with variables and
                    redundancy: the
                    <emphasis>sequences variables</emphasis>
                </para>
                <para>
                    These variables are very useful to reduce your
                    configuration file size and its management.
                </para>
                <para>
                    A <emphasis>sequence</emphasis> is a list of values for a variable. In our example,
                    <emphasis>NP</emphasis> is a sequence variable which has values
                    <emphasis>4</emphasis> and <emphasis>8</emphasis> and the
                    <emphasis>benchmark</emphasis> tag will be <emphasis>expanded</emphasis>
                    into two benchmark tags: one with NP value set to 4
                    and an other with NP value set to 8.
                </para>
                <para>
                    If a sequence variable is used in a
                    <emphasis>serie</emphasis>
                    's attribute, this serie tag will be expanded to a number of serie tags
					equals to the number of values there are in your sequence.
                </para>
                <para>
                    For example, these two examples are equivalents :
                </para>
                <programlisting language="xml">&lt;timit&gt;

  &lt;globalVariables&gt;
    &lt;descriptorVariable name="ALGO" value="Algo1,Algo2"/&gt;
    &lt;descriptorVariable name="NP"   value="4,8"/&gt;
    &lt;descriptorVariable name="TEST" value="#1"/&gt;
  &lt;/globalVariables&gt;

  &lt;serie (...) result="${ALGO}"&gt;
    &lt;benchmarks&gt;
      &lt;benchmark name="Test ${TEST} : algo ${ALGO} on ${NP} nodes" (...)/&gt;
    &lt;/benchmarks&gt;
  &lt;/serie&gt;

&lt;/timit&gt;</programlisting>

			  <programlisting language="xml">&lt;timit&gt;

  &lt;globalVariables&gt;
    &lt;descriptorVariable name="TEST" value="#1"/&gt;
  &lt;/globalVariables&gt;

  &lt;serie (...) result="Algo1"&gt;
    &lt;benchmarks&gt;
      &lt;benchmark name="Test #1 : algo Algo1 on 4 nodes" (...)/&gt;
      &lt;benchmark name="Test #1 : algo Algo1 on 8 nodes" (...)/&gt;
    &lt;/benchmarks&gt;
  &lt;/serie&gt;

  &lt;serie (...) result="Algo2"&gt;
    &lt;benchmarks&gt;
      &lt;benchmark name="Test #1 : algo Algo2 on 4 nodes" (...)/&gt;
      &lt;benchmark name="Test #1 : algo Algo2 on 8 nodes" (...)/&gt;
    &lt;/benchmarks&gt;
  &lt;/serie&gt;

&lt;/timit&gt;</programlisting>
                <para>
                    <emphasis>Important</emphasis>:
                </para>
                <para>
                    <emphasis>Sequences</emphasis> variables are not handled by
                    <emphasis>ProActive</emphasis> descriptor files, 
					so do not use same names for
                    ProActive descriptor and sequence variable names to
                    avoid bad overwriting. To do it, you should prefer
                    overwriting in <emphasis>benchmark</emphasis>
                    tag like this:
                </para>
                <programlisting language="xml">&lt;benchmark name="Test ${TEST} : algo ${ALGO} on ${NP} nodes" (...) &gt;
  &lt;descriptorVariable name="NBNODES" value="${NP} /&gt;
&lt;/benchmark&gt;</programlisting>
                <para>
                    <emphasis>Note</emphasis>:
                </para>
                <para>
                    You can use <emphasis>sequences</emphasis>
                    without using variables, with <literal>#{...}</literal> pattern:
                </para>
                <programlisting language="xml">&lt;benchmark name="Test ${TEST} : algo #{Algo1,Algo2} on ${NP} nodes" (...) &gt;
  &lt;descriptorVariable name="NBNODES" value="${NP} /&gt;
&lt;/benchmark&gt;</programlisting>
            </section>
            <section xml:id="Serie"><info><title>Serie</title></info>

                <para>
                    A serie represents a suite of benchmarks. For
                    example, if you want to benchmark two algorithms
                    with different parameters, you can specify two
                    series (one for each algorithm) and then specify
                    different benchmarks for all parameters.
                </para>
                <para>Attribute description:</para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>descriptorBase</emphasis> (Optional):
                            the file containing the base ProActive
                            deployment descriptor
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>class</emphasis> (Compulsory):
                            the class of your application which is
                            <emphasis>Startable</emphasis>
                            (see <xref linkend="Addtimecounter" />)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>result</emphasis> (Compulsory):
                            the output file for writing final results
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>errorFile</emphasis> (Optional):
                            if an error occurs (recoverable), logs will
                            be outputted into this file
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Chartdefinition"><info><title>Chart definition</title></info>

                <para>
					In order to describe charts, you have to use <emphasis role="bold">chart</emphasis> tags
					inside a <emphasis role="bold">charts</emphasis> one.
                    Those charts will be generated thanks to benchmark results.
                </para>
                <para>Attribute description:</para>
                <para>
                    Some attributes are independent on the chart type:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>type</emphasis> (Compulsory):
                            the type of chart you want to create
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>title</emphasis> (Compulsory):
                            your chart title
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>subtitle</emphasis> (Compulsory):
                            your chart subtitle
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>xaxislabel</emphasis> (Compulsory):
                            the X axis label
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>yaxislabel</emphasis> (Compulsory):
                            the Y axis label
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>width</emphasis> (Optional):
                            the width of the output chart
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>height</emphasis> (Optional):
                            the height of the output chart
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>filename</emphasis> (Compulsory):
                            the chart output filename (will produce
                            both a <emphasis role="italics">.PNG</emphasis> and <emphasis role="italics">.SVG</emphasis> files)
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    But some others are chart type specific:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>filter</emphasis> (Optional):
                            the name of the counter (event) you want
                            to involve in this chart. All activated
                            counters (events) are involved if not
                            specified (available only for
                            <literal>HierarchicalBarChart</literal> and
                            <literal>Line2dChart</literal>)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>tag</emphasis> (Compulsory):
                            the tag to deal with (<literal>timers</literal>
                            or <literal>events</literal>) must be associated with
                            <emphasis>attribute</emphasis>
                            (available only for <literal>Line2dChart</literal>)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>attribute</emphasis> (Compulsory):
                            the attribute value (<literal>min</literal>,
                            <literal>average</literal>, <literal>max</literal>
                            or <literal>deviation</literal>) to use for the chart (available only for
                            <literal>Line2dchart</literal>)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>legendFormatMode</emphasis> (Optional):
                            the format of the legend (<literal>Default</literal>,
                            <literal>None</literal>, <literal>K1000</literal>,
							<literal>K1024</literal>) to show value in legend as standard, power
                            of 2 or power of 10 numbers (available only
                            for <literal>MatrixChart</literal>)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>scaleMode</emphasis> (Optional):
                            the scale mode (<literal>Default</literal>,
                            <literal>Linear</literal>, <literal>Logarithmic</literal>) 
							for the chart (available only for <emphasis>MatrixChart</emphasis>)
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Benchmarksuitedefinition"><info><title>Benchmark suite definition</title></info>

                <para>
                    To define the suite of tests with different parameters, you have to use
					<emphasis role="bold">benchmark</emphasis> tags inside a <emphasis role="bold">benchmarks</emphasis> one.
                    Each test will generate a result file and an entry in chart.
                </para>
                <para>Attribute description:</para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>name</emphasis> (Compulsory):
                            the name of the benchmark. Will be set in
                            result file.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>run</emphasis> (Compulsory):
                            the number of runs you want to perform.
                            Final result will give the
                            min/average/max/deviation between these
                            runs.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>warmup</emphasis> (Optional):
                            the number of "untimed" runs you want to
                            perform before starting the real runs.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>timeout</emphasis> (Optional):
                            the time in seconds before restarting a
                            run (with a maximum of 3 restarts per
                            benchmark).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>descriptorGenerated</emphasis> (Optional):
                            the ouput file where TimIt will put the
                            ProActive deployment descriptor.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>removeExtremums</emphasis> (Optional):
                            if <literal>true</literal>, 
							max and min values between all runs will
                            be removed.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>note</emphasis> (Optional):
                            the text entered here will be copied into
                            the result file. Useful for specifying launch
                            environment.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>parameters</emphasis> (Compulsory):
                            the parameters to launch your application.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>output</emphasis> (Compulsory):
                            result of all runs will be outputted into
                            this output file.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    In addition to these attributes, you can specify
                    descriptorVariable tags which will be copied into
                    generated ProActive deployment descriptor file.
                </para>
			</section>
            <section xml:id="ConfigurationExample"><info><title>Example of a complete configuration file</title></info>
                <para>
                    Here is a complete example of a configuration file:

					<programlisting language="xml"><textobject><textdata fileref="automatic_snippets/TimIt_ConfigFile.snip"/></textobject></programlisting>
                </para>
            </section>
        </section>
        <section xml:id="Addtimecounter"><info><title>
                Add time counters and event observers in your source
                files
            </title></info>

			<para>
				This section shows how to add time counters and event observers in your source files.
				It is really straight forward but you have nevertheless two small conditions to respect:
			</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>
                            Your main class has to implement the
                            <emphasis>Startable</emphasis>
                            interface:
							<programlisting language="java"><textobject><textdata fileref="automatic_snippets/TimIt_Example_Class.snip"/></textobject></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            your analyzed class has to extend the
                            <emphasis>Timed</emphasis> class:
							<programlisting language="java"><textobject><textdata fileref="automatic_snippets/TimIt_Worker_Class.snip"/></textobject></programlisting>
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
    </section>
    <section xml:id="Usage"><info><title>Usage</title></info>

        <para>
            TimIt provides different kinds of services. By combining them,
            you will be able to measure many parameters of your
            application. TimIt package contains few examples for using
            these services in your application.
        </para>
        <section xml:id="Timercounters"><info><title>Timer counters</title></info>

            <para>
                It will help you to time some pieces of code in your
                application. For example you can get total,
                initialization, working and communication times. These
                counters are hierarchical. It means that time values
                will be defined by counter dependencies.
            </para>
            <para>Example of hierarchy:</para>
            <itemizedlist>
                <listitem>
                    <para>Total time = 60 seconds</para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                Initialization time = 10 seconds
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        Communication time = 4 seconds
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>Working time = 50 seconds</para>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        Communication time = 17 seconds
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>
                Here you can see <emphasis>communication</emphasis>
                part both in <emphasis>initialization</emphasis>
                and <emphasis>working</emphasis> time.
            </para>
            <para>The code associated to this example is:</para>
            <para>
                <programlisting language="java">T_TOTAL.start();

  T_INIT.start();
    // Initialization part...
    T_COMM.start();
      // Communications...
    T_COMM.stop();
  T_INIT.stop();

  T_WORK.start();
    // Working part...
    T_COMM.start();
      // Communications...
    T_COMM.stop();
  T_WORK.stop();

T_TOTAL.stop();</programlisting>
            </para>
        </section>
        <section xml:id="Eventobservers_17"><info><title>Event observers</title></info>

            <para>
                It will help you to keep an eye on different events that
                occur in your application.
            </para>
            <para>There is two types of events:</para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>Default event</emphasis>
                    </para>
                    <para>
                        This event manages a <emphasis>single value</emphasis>
                        (a <emphasis>double</emphasis>).
						It can be useful to compute mflops or total
                        number of performed communications.
                    </para>
                    <para>Example of usage:</para>
                    <programlisting language="java">// Initialization
int collapseOperation = DefaultEventData.SUM;
int notifyOperation = DefaultEventData.SUM;
EventObserver E_NBCOMMS = TimIt.add(
         new DefaultEventObserver("nbComms", collapseOperation, notifyOperation));</programlisting>
                    <para>
                        The value of <emphasis>notifyOperation</emphasis>
                        determines what operation to perform between
                        notifications.
                    </para>
                    <para>
                        The value of <emphasis>collapseOperation</emphasis>
                        determines what operation to perform between
                        timed objects.
                    </para>
                    <programlisting language="java">// Utilization
for( int i=0; i&lt;10; i++ ) {
  TimIt.notifyObservers( new Event(E_NBCOMMS, 1) );
}</programlisting>
                    <para>
                        For each timed object, nbComms value will be 10,
                        and final value would be 30 if we had 3 timed
                        objects.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Communication event</emphasis>
                    </para>
                    <para>
                        This event were designed for communications. It
                        manages a <emphasis>square matrix</emphasis>
                        which can be used by example to determine
                        topology of communications between timed
                        objects.
                    </para>
                    <para>Example of usage:</para>
                    <programlisting language="java">// Initialization
EventObserver E_COMM = TimIt.add(
         new CommEventObserver("mflops", groupSize, timedID);</programlisting>
                    <para>
                        The value of <emphasis role="bold">groupSize</emphasis> represents the number of timed
                        objects which are involved in these
                        communications.
                    </para>
                    <para>
                        the value of <emphasis role="bold">timedID</emphasis> represents an identification
                        number which represents the current timed object
                        (like the rank).
                    </para>
                    <programlisting language="java">// Utilization
int destID = (timedID + 1) % groupSize;
TimIt.notifyObservers( new CommEvent(E_COMM, destID, 1) );</programlisting>
                    <para>
                        Between each notification, an incrementation of the
                        old value will be performed. Then the collapsing
                        operation between the timed objects will be a
                        sum. In this case, you will obtain a matrix
                        showing the topology of your application.
                    </para>
                    <para>
                        Lines represent the senders and columns
                        the receivers. Here we obtain a ring
                        topology:
                    </para>
                    <programlisting language="java">1 0 0 0
0 0 0 1
0 0 1 0
0 1 0 0</programlisting>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="TimItextension"><info><title>TimIt extension</title></info>

        <para>
            TimIt package can be found in the
            <emphasis>
                org.objectweb.proactive.extensions.timitspmd
            </emphasis> package.
            We try to make as easy as possible the way to add a new
            feature to this application. To do so, TimIt is organized in
            5 major points which can be extended:
        </para>
        <section xml:id="Configurationfile"><info><title>Configuration file</title></info>

            <para>
                The subpackage
                <emphasis>org.objectweb.proactive.extensions.timitspmd.config</emphasis>
                contains all classes related to the configuration file
                management.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>ConfigReader</emphasis>
                    </para>
                    <para>
                        This class reads the configuration file. It deals with
                        <emphasis>globalVariable</emphasis> and <emphasis>serie</emphasis> tags.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Tag</emphasis>
                    </para>
                    <para>
                        All created tags (except <emphasis>globalVariable</emphasis>) 
						have to extend this class. It makes easier the
                        way to read tag's attributes. If you want to
                        create a new tag, extend this class and take
                        <emphasis>Benchmark</emphasis> as an example.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                <emphasis>Example:</emphasis>
            </para>
            <para>
                Suppose you want to add an attribute <emphasis>myOption</emphasis>
                to the <emphasis>Benchmark</emphasis> tag where the default value is
                <emphasis>1</emphasis>.
            </para>
            <programlisting language="java">// Add these lines in the get method of Benchmark class
if (name.equals("myOption")) {
  return "1";
}</programlisting>
            <para>
                Then, you will be able to use it like this:
            </para>
            <programlisting language="java">String result = bench.get("myOption");
// ... and do whatever you want with it...</programlisting>
        </section>
        <section xml:id="Timercounters_17"><info><title>Timer counters</title></info>

            <para>
                The subpackage <emphasis>org.objectweb.proactive.extensions.timitspmd.util</emphasis>
                contains all classes related to the timing management.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>HierarchicalTimer</emphasis>
                    </para>
                    <para>
                        This class will contain values of all timer
                        counters. Here is all the "intelligence" of the
                        timer. For example, if you want to use
                        nanoseconds instead of milliseconds, you should
                        extend this class and overwrite
                        <literal>getCurrentTime()</literal>
                        method.
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="Eventobservers"><info><title>Event observers</title></info>

            <para>
                The subpackage
                <emphasis>org.objectweb.proactive.extensions.timitspmd.util.observing</emphasis>
                contains all classes related to the event observers
                management. Existent event observers are default and
                communication specific. Default (<emphasis>DefaultEventObserver</emphasis>) 
				is base on a single value, while the communication specific (<emphasis>CommEventObserver</emphasis>) 
				is based on 2D square matrix.
            </para>
            <para>
                Event observers are based on the
                <emphasis>observer-observable</emphasis>
                design pattern.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>EventObserver</emphasis>
                    </para>
                    <para>
                        This interface must be implemented by all kind
                        of event observers. These implementations will
                        have to deal with an <emphasis>EventData</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Event</emphasis>
                    </para>
                    <para>
                        Each kind of event should have its own <emphasis>Event</emphasis>
                        implementation. An instance of this event will be passed to each notification.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>EventData</emphasis>
                    </para>
                    <para>
                        Like <emphasis>HierarchicalTimer</emphasis> for the timing service,
                        <emphasis>EventData</emphasis> is the "intelligence" of event observing. It
                        will contain all data values for a particular <emphasis>Timed</emphasis>
                        object. It also contain a <literal>collapseWith()</literal>
                        method which will be used to merge data values from all
                        <emphasis>Timed</emphasis> objects.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>EventObservable</emphasis>
                    </para>
                    <para>
                        For performance purpose, there is to implementations of this interface. 
						A <emphasis>FakeEventObservable</emphasis> and a <emphasis>RealEventObservable</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>EventDataBag</emphasis>
                    </para>
                    <para>
                        This class contains data values from all <emphasis>Timed</emphasis> objects. 
						You are able to get it through an <emphasis>EventStatistics</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>EventStatistics</emphasis>
                    </para>
                    <para>
                        When a benchmark run is done, you can get a <emphasis>BenchmarkStatistics</emphasis>
                        which contains both timer and event statistics.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                <emphasis>Example:</emphasis>
            </para>
            <para>
                Suppose you want to create a new kind of <emphasis>Event</emphasis>
                which works with a 3D matrix instead of 2D matrix like <emphasis>CommEventObserver</emphasis>.
            </para>
            <para>You will have to implement 2 or 3 classes:</para>
            <orderedlist>
                <listitem>
                    <para>
                        <emphasis>MyEventObserver</emphasis> which implements <emphasis>EventObserver</emphasis>
                    </para>
                    <para>
                        It will receive notifications and transmit them to your <emphasis>EventData</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>MyEventData</emphasis> which implements <emphasis>EventData</emphasis>
                    </para>
                    <para>
                        It will contain your 3D matrix computed from your notifications.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>MyEvent</emphasis> which implements <emphasis>Event</emphasis>
                    </para>
                    <para>
                        It will be passed at each notification of your
                        observer and will contain necessary data to
                        update your 3D matrix.
                    </para>
                    <para>
                        Notice that you can reuse an other <emphasis>Event</emphasis>
                        implementation if existing ones are sufficient.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section xml:id="Chartgeneration"><info><title>Chart generation</title></info>

            <para>
                The subpackage <emphasis>org.objectweb.proactive.extensions.timitspmd.util.charts</emphasis>
                contains all classes related to charts generation. This
                service is based on <emphasis>JFreeChart</emphasis>
                API (<link xlink:href="http://www.jfree.org/jfreechart/" />). Three major type
                of charts are proposed with <emphasis>TimIt</emphasis>:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>HierarchicalBarChart</emphasis>
                        - used to represent a serie of hierarchical timing statistics.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Line2dChart</emphasis>
                        - used to represent a serie of single values.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>MatrixChart</emphasis>
                        - used to represent communications specific event observer.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Remember that in configuration file, choosing your chart
                type is done through the <literal>type</literal> attribute of
                <literal>chart</literal> tag. Actually, it represents the
				classname used to handle your chart creation.
            </para>
            <para>
                Moreover, to create a new kind of chart, you just
                have to implement the <emphasis>Chart</emphasis>
                interface. So, you will have access to XML results file,
                full <emphasis>BenchmarkStatistics</emphasis>
                and all chart parameters given in configuration file
                (see <xref linkend="Configurationfile" /> to know how to add an attribute).
            </para>
            <para>
                If you need a very complex rendering chart method, you
                can implement your own renderer like we did for
                <emphasis>HierarchicalBarChart</emphasis>. Take this class as an example, and refer to the
                <emphasis>JFreeChart</emphasis> documentation.
            </para>
        </section>
    </section>
</chapter>
