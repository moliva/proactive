<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="WritingProActiveDocumentation"><info><title xml:id="HowtowriteProActivedocumentation_42">How to write ProActive documentation</title></info>

	<section xml:id="ReasonForDocumentationChapter"><info><title xml:id="Aimofthischapter_42">Aim of this chapter</title></info>


		<para>
			This chapter is meant to help you as a reference for
			writing ProActive-directed documentation. If you have added
			a new feature and want to help its uptake by documenting it,
			you should read this chapter.
		</para>

		<para>
			The examples sections (<xref linkend="DocBookExamples"/>)
			describes the use of the main tags you will use (eventually,
			all the ProActive-allowed docbook tags should be described).
			The limitations (<xref linkend="DocBookLimitations"/>)
			section describes what is allowed in our docbook style, and
			why we restrict ourselves to a subset of docbook.
		</para>
	</section>

	<section xml:id="DocBookQuickStart"><info><title xml:id="GettingaquickstartintowritingProActivedoc_42">Getting a quick start into writing ProActive doc</title></info>


	<para>
		First off, all the documentation is written in
		<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://nwalsh.com/docbook/">docbook</link>. You
		can find all the documentation source files in the
		<literal>ProActive/doc/src/</literal> directory.
	</para>

	<para>
		Here are the instructions to follow to start well and fast writing
		documentation for the ProActive middleware:
	</para>

	<orderedlist>
		<listitem>
		<para>
				Choose an XML editor: XMLMind XML Editor (<emphasis role="bold">XXE</emphasis>), Eclipse (an its XML plugin)...
				You can also use a simple text editor.
			</para>
		</listitem>

		<listitem>
			<para>
				If you want a new chapter of your own, copy one of the existing
				files (<literal>ProActive/doc/src/WebServices.xml</literal> for example).
			</para>
		</listitem>

		<listitem>
			<para>
				Reference your file in the root element of the doc (it is
				currently called main.xml)
			</para>
		</listitem>

		<listitem>
			<para>Open your file with the editor you have chosen.</para>
		</listitem>
		<listitem>
			<para>If your are using XXE:</para>
			<itemizedlist>
				<listitem>
					<para>REMEMBER: YOU ARE EDITING AN XML FILE - you can always edit
					it with vi if you dare</para>
				</listitem>

				<listitem>
					<para>Use generously the icons at the top, they have the essential
					tags you will use</para>
				</listitem>

				<listitem>
					<para>Use the list of tags, just under the icons, to select the item
					you want to edit</para>
				</listitem>

				<listitem>
					<para>Use the column on the right to add tags, when you know their
					names</para>
				</listitem>

				<listitem>
					<para>When you're done, there is a spellchecker integrated, as well
					as a DocBook validator. Please use these tools!</para>
				</listitem>
			</itemizedlist>
		</listitem>

		<listitem>
			<para>
				Run the ant target <literal>build doc.ProActive.manualHtml</literal> and  you should have
				an HTML copy of the doc. If you want to generate all the possible output formats,
				call <literal>build doc.ProActive.manual</literal>. Type <literal>build</literal> to
				see all the available targets for compiling the documentation.
				With XXE, You can also see what the results seem to be
				without compiling!
			</para>
		</listitem>

		<listitem>
			<para>Commit your changes to the SVN repository</para>
		</listitem>

	</orderedlist>
</section>

<section xml:id="DocBookExamples"><info><title xml:id="Exampleuseoftags_42">Example use of tags</title></info>


	<para>These are the basic rules to follow to use docbook tags. This document
	is made up of the files in the <literal>docBookTutorial</literal> directory, and
	you may find it with the other manual files in the <literal>ProActive/doc/src</literal> directory.</para>

	<section xml:id="Summaryoftheusefultags_42"><info><title>Summary of the useful tags</title></info>

		<para>The main tags/structures you should be using are: </para>

		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">&lt;figure&gt;</emphasis> - when you want to insert an image</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;example&gt;</emphasis> - when you want an example with a title (should
				contain a &lt;screen&gt; or a &lt;programlisting&gt;). You can also use
				&lt;literal&gt; inside paragraphs.</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;screen&gt;</emphasis> - when you want to insert a command line, an output or
				a flat text...</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">&lt;programlisting language="[java|xml|c]"&gt;</emphasis> - when you want to insert a java, an XML or a C
					snippet of code which will be highlighted.
				</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;para&gt;</emphasis> - to start a paragraph.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">&lt;section&gt;</emphasis> - to start a section.</para>
			</listitem>
			<listitem>
			<para><emphasis role="bold">&lt;emphasis&gt;</emphasis> - when you want to have some particular text pointed out.</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;itemizedlist&gt;</emphasis> followed by several <emphasis role="bold">&lt;listitem&gt;</emphasis> - when
			you want bullets</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;orderedlist&gt;</emphasis> followed by several <emphasis role="bold">&lt;listitem&gt;</emphasis> - when
			you want numbered bullets</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">&lt;xref&gt;</emphasis> - when you want to reference another
				section, chapter, example, etc. using its id.</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;ulink&gt;</emphasis> - when you want to reference a web URL.</para>
			</listitem>

			<listitem>
				<para><emphasis role="bold">&lt;table&gt;</emphasis> - when you want to insert a table.</para>
			</listitem>
		</itemizedlist>

		<note>
			<para><emphasis role="bold">If you are using XXE, you should always use the XXE icons.
				They have all you need (except for EXAMPLE/SCREEN)! You can also cut'n paste!</emphasis>
			</para>
		</note>
	</section>

	<section xml:id="Figures"><info><title xml:id="Figures_42">Figures</title></info>

		<para>This is the figure example. Please use the <emphasis role="bold">&lt;title&gt;</emphasis> tag.</para>

		<figure xml:id="ADrawingusingtheFIGUREtag_42"><info><title>A drawing using the &lt;figure&gt; tag</title></info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" align="center" fileref="images/png/e1.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>Here is what has been written into the XML file:</para>

		<programlisting language="xml"><![CDATA[<figure xml:id="ADrawingusingtheFIGUREtag_42">
	<info>
		<title>A drawing using the &lt;figure&gt; tag</title>
	</info>
	<mediaobject>
		<imageobject>
			<imagedata scalefit="1" width="100%" contentdepth="100%" align="center" fileref="images/png/e1.png" format="PNG"/>
		</imageobject>
	</mediaobject>
</figure>]]></programlisting>

	</section>

	<section xml:id="Bullets"><info><title xml:id="Bullets_42">Bullets</title></info>

		<para>Use <emphasis role="bold">&lt;itemized&gt;</emphasis> followed by as many <emphasis role="bold">&lt;listitem&gt;</emphasis>'s as you want!</para>
		<itemizedlist>
			<listitem>
				<para>
					Provide an implementation for the required server-side
					functionalities
				</para>
			</listitem>
			<listitem>
				<para>Provide an empty, no-arg constructor</para>
			</listitem>
			<listitem>
				<para>Write a method in order to instantiate one server object.</para>
			</listitem>
		</itemizedlist>

		<para>Here is what has been inserted into the XML file:</para>
		<programlisting language="xml">
<![CDATA[<itemizedlist>
	<listitem>
		<para>Provide an implementation for the required server-side functionalities</para>
	</listitem>
	<listitem>
		<para>Provide an empty, no-arg constructor</para>
	</listitem>
	<listitem>
		<para>Write a method in order to instantiate one server object.</para>
	</listitem>
</itemizedlist>]]></programlisting>

	</section>

	<section xml:id="Code"><info><title xml:id="Code_42">Code</title></info>


		<para>
			Code sources should be written using the <emphasis role="bold">&lt;programlisting language="java"&gt;</emphasis> tag (possibly language are java, xml or c).
			You do not have to write valid code, as the highlighting (done by the docbook highlighting) is based on
			regular expression replacement, and not on language grammars.
			If you want to show some program output, you can use <emphasis role="bold">&lt;screen&gt;</emphasis> instead
			of <emphasis role="bold">&lt;programlisting&gt;</emphasis>. In any case, watch out, because spaces count (and produce your own indentation)!
			You can also use the <emphasis role="bold">&lt;example&gt;</emphasis> tag around your <emphasis role="bold">&lt;programlisting&gt;</emphasis> or <emphasis role="bold">&lt;screen&gt;</emphasis> tags, to give a title
			and be referenced in the table of examples.
		</para>

		<para>
			There are three different ways to insert code:
		</para>
		<itemizedlist>
			<listitem><para>by referencing a file</para></listitem>
			<listitem><para>by referencing a code snippet</para></listitem>
			<listitem><para>by directly writing your code into the &lt;programlisting&gt; tag</para></listitem>
		</itemizedlist>
		<warning>
			<para>
				We strongly advise to use one of the two first ways.
				Writing directly codes into the documentation files implies to always update the documentation when source codes change.
				Referencing a file or a piece of code which is always up-to-date is the best means to keep coherence between the source code and
				the documentation.
			</para>
		</warning>
<!--		<para>-->
<!--			When you are typing the code inside the docbook file, you can even highlight yourself some-->
<!--			bits of the code you want to emphasis. This is shown in the last example. But beware, as you are-->
<!--			inside docbook you have to escape the "&amp;" and the "&lt;" signs. If you don't want to, hide-->
<!--			everything in a CDATA block.</para>-->
<!---->
<!--	<para>Within normal text, for instance in a paragraph, you can also just use-->
<!--   the LITERAL tag to highlight the  <literal>main</literal> methods.</para>-->

		<para>We will now give some examples illustrating each case of writing code into the documentation. After each example, the documentation XML code is exposed.</para>

		<example xml:id="JAVAprogramlistingwithfileinclusion_42">
			<info>
				<title>JAVA program listing with file inclusion</title>
			</info>
			<programlisting language="java"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/hello/TinyHello.java"/></textobject></programlisting>
		</example>

		<example xml:id="DSC_JAVAprogramlistingwithfileinclusion_42">
			<info>
				<title>Documentation source code of <xref linkend="JAVAprogramlistingwithfileinclusion_42" /></title>
			</info>
			<programlisting language="xml"><![CDATA[<example xml:id="JAVAprogramlistingwithfileinclusion_42">
	<info>
		<title>JAVA program listing with file inclusion</title>
	</info>
	<programlisting language="java"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/hello/TinyHello.java"/></textobject></programlisting>
</example>]]></programlisting>
		</example>

		<example xml:id="XMLprogramlistingwithfileinclusion_42">
			<info>
				<title>XML program listing with file inclusion</title>
			</info>
			<programlisting language="xml"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/components/c3d/adl/UserImpl.fractal"/></textobject></programlisting>
		</example>

		<example xml:id="DSC_XMLprogramlistingwithfileinclusion_42">
			<info>
				<title>Documentation source code of <xref linkend="XMLprogramlistingwithfileinclusion_42" /></title>
			</info>
			<programlisting language="xml"><![CDATA[<example xml:id="XMLprogramlistingwithfileinclusion_42">
	<info>
		<title>XML program listing with file inclusion</title>
	</info>
	<programlisting language="xml"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/components/c3d/adl/UserImpl.fractal"/></textobject></programlisting>
</example>]]></programlisting>
		</example>

		<para>Here is a screen example. For instance, this could be some code inside a unix shell:</para>

		<example xml:id="screen_42">
			<info>
				<title>A screen example</title>
			</info>
			<screen>linux &gt; start.sh &amp; </screen>
		</example>

		<example xml:id="DSC_screen_42">
			<info>
				<title>Documentation source code of <xref linkend="screen_42"/></title>
			</info>

			<programlisting language="xml"><![CDATA[<example xml:id="screen_42">
		<info>
			<title>A screen example</title>
		</info>
		<screen>linux &gt; start.sh &amp; </screen>
	</example>
</example>]]></programlisting>
		</example>

		<para>
			As previously evoked, it is also possible to display a snippet of an existing code.
			To do this, you should insert the following comments into your source code:
		</para>
		<itemizedlist>
			<listitem><para><emphasis role="bold">//@snippet-start MySnippet</emphasis> or <emphasis role="bold">&lt;!-- @snippet-start MySnippet --&gt;</emphasis> - to start your snippet</para></listitem>
			<listitem><para><emphasis role="bold">&lt;!-- @snippet-start-with-header MySnippet --&gt;</emphasis> - to start your snippet adding the XML prologue before (only for XML files)</para></listitem>
			<listitem><para><emphasis role="bold">//@snippet-start-with-copyright MySnippet</emphasis> - to start your snippet adding the copyright before (only for Java files)</para></listitem>
			<listitem><para><emphasis role="bold">//@snippet-end MySnippet</emphasis> or <emphasis role="bold">&lt;!-- @snippet-end MySnippet --&gt;</emphasis> - to end your snippet</para></listitem>
			<listitem><para><emphasis role="bold">//@snippet-break MySnippet</emphasis> or <emphasis role="bold">&lt;!-- @snippet-break MySnippet --&gt;</emphasis> - to break your snippet</para></listitem>
			<listitem><para><emphasis role="bold">//@snippet-resume MySnippet</emphasis> or <emphasis role="bold">&lt;!-- @snippet-resume MySnippet --&gt;</emphasis> - to resume your snippet</para></listitem>
		</itemizedlist>
		<warning>
			<para>
				You cannot not insert an annotation before the prologue in case of an XML file and you should not insert an annotation before a copyright in case of a Java file.
				Adding such an annotation before the prologue of an XML file makes it invalid and if you add one before the copyright of a Java file, it will be removed the next
				time we will update copyrights.
				If you want to have the prologue or the copyright displayed in your snippet, use <emphasis role="bold">@snippet-start-with-header</emphasis> and
				<emphasis role="bold">@snippet-start-with-copyright</emphasis>.
			</para>
		</warning>
		<para>
			For this moment, only java, xml, c and fractal files are supported for snippet extraction and you must respect some rules:
		</para>
		<itemizedlist>
			<listitem><para>The name of your snippet, here "MySnippet", should be unique.</para></listitem>
			<listitem><para>A started snippet has to be ended.</para></listitem>
			<listitem><para>A broken snippet has to be resumed before it ends.</para></listitem>
			<listitem><para>Break blocks of a same snippet cannot be imbricated.</para></listitem>
			<listitem><para>For a given snippet name, the first annotation is snippet-start.</para></listitem>
			<listitem><para>For a given snippet name, the last annotation is snippet-end.</para></listitem>
			<listitem>
				<para>
					The source file has to be located into the <literal>ProActive/src/</literal> or the <literal>ProActive/examples/</literal> directory.
					The other directories are not browsed by the snippet extractor.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			When compiling the documentation, we can see errors that occurred during the snippet extraction.
		</para>

		<example xml:id="SC_snippet_42">
			<info>
				<title>File from which the snippet will be extracted</title>
			</info>
			<programlisting language="java"><textobject><textdata fileref="../../../src/Examples/org/objectweb/proactive/examples/documentation/classes/A.java"/></textobject></programlisting>
		</example>

		<example xml:id="snippet_42">
			<info>
				<title>Snippet extraction</title>
			</info>
			<programlisting language="java"><textobject><textdata fileref="automatic_snippets/class_A.snip"/></textobject></programlisting>
		</example>


		<example xml:id="DSC_snippet_42">
			<info>
				<title>Documentation source code of <xref linkend="snippet_42"/></title>
			</info>
			<programlisting language="xml"><![CDATA[<example xml:id="snippet_42">
	<info>
		<title>Result of the snippet extraction</title>
	</info>
	<programlisting language="java"><textobject><textdata fileref="automatic_snippets/class_A.snip"/></textobject></programlisting>
</example>]]></programlisting>
		</example>

		<para>Finally, here is some java code directly included in the docbook (you can
		use CDATA to escape  &amp; and &lt;):</para>

		<example xml:id="programlistingWithDirectInclusion">
			<info>
				<title>Java program listing with direct inclusion</title>
			</info>

			<programlisting language="java">package util;

import java.io.IOException;

/** Just a dummy class. */

public class Dummy {

  /** Just the method description
   * @param fileToConvert the name of the file to convert
   * @return a String created  */
  String convert(String fileToConvert) throws IOException {
    if (a &gt; b &amp;&amp; c &lt; d ) {
      // can use "this" for 'NodeCreationEvent'
      VirtualNode vn = pad.getVirtualNode("vn");
      vn.start();
      }
    return "Hello World";
  }

}</programlisting>
		</example>


		<example xml:id="DCS_programlistingWithDirectInclusion">
			<info>
				<title>Documentation source code of <xref linkend="programlistingWithDirectInclusion" /></title>
			</info>

			<programlisting language="xml"><![CDATA[		<example xml:id="programlistingWithDirectInclusion">
			<info>
				<title>Java program listing with direct inclusion</title>
			</info>

			<programlisting language="java">package util;

import java.io.IOException;

/** Just a dummy class. */

public class Dummy {

  /** Just the method description
   * @param fileToConvert the name of the file to convert
   * @return a String created  */
  String convert(String fileToConvert) throws IOException {
    if (a &gt; b &amp;&amp; c &lt; d ) {
      // can use "this" for 'NodeCreationEvent'
      VirtualNode vn = pad.getVirtualNode("vn");
      vn.start();
      }
    return "Hello World";
  }

}</programlisting>
		</example>]]></programlisting>
		</example>

	</section>
	<section xml:id="Links"><info><title xml:id="Links_42">Links</title></info>

		<para>
			Use <emphasis role="bold">&lt;xref&gt;</emphasis> tags to point to a element of your documentation.
			For instance, you can refer to the "Figures" section like that <xref linkend="Figures"/>.
			The documentation source code of this link is the following one:
		</para>

		<programlisting language="xml"><![CDATA[<xref linkend="Figures"/>]]></programlisting>

		<para>
			The <literal>linkend</literal> attribute points to the id which
			is referenced, for example, in a &lt;section&gt; tag. With the <literal>endterm</literal> attribute,
			you can customize the content which will be used to point to the reference.
			For instance, the following example refers to the same section as previously but using the figure itself:
			<xref linkend="Figures" endterm="ADrawingusingtheFIGUREtag_42"/>
		</para>
		<para>This has been done using the following code:</para>
		<programlisting language="xml"><![CDATA[<xref linkend="Figures" endterm="ADrawingusingtheFIGUREtag_42"/>]]></programlisting>

		<para>
			Use <emphasis role="bold">&lt;link&gt;</emphasis> tags to point to
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/"> a web references
			(ProActive for instance)</link>.
			Here is the documentation source code for this link:
		</para>
		<programlisting language="xml"><![CDATA[<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/"> a web references (ProActive for instance)</link>]]></programlisting>
		<para>
			This is the way of writing links as describes in the DocBook documentation. However, the xlink namespace is already defined in the DocBook xsl files. So, it is possible to omit it.
			You may have already the &lt;ulink&gt; tags for other documents based on DocBook. This is no longer possible with the version 5 of DocBook: this tag has been removed.
		</para>
		<para>
			Use <emphasis role="bold">&lt;citation&gt;</emphasis> followed by an <emphasis role="bold">&lt;xref&gt;</emphasis> for citations. For example, see
			<citation><xref linkend="BBC02" endterm="BBC02.abbrev"/></citation> to learn on
			groups. All the biblio entries should be put in <literal>biblio.xml</literal>.
			This citation has been written using the following piece of code:
		</para>
		<programlisting language="xml"><![CDATA[<citation><xref linkend="BBC02" endterm="BBC02.abbrev"/></citation>]]></programlisting>

	</section>

	<section xml:id="Tables"><info><title xml:id="Tables_42">Tables</title></info>

   <para>The tag to use is <emphasis role="bold">&lt;table&gt;</emphasis>.</para>

   <table>

		<title xml:id="Thisisanexampletable_42">This is an example table</title>

		<tgroup cols="2">
			<thead>
				<row>
					<entry><para>Name</para></entry>
					<entry><para>Hits</para></entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry><para>Bob</para></entry>
					<entry><para>5</para></entry>
				</row>

				<row>
					<entry><para>Mike</para></entry>
					<entry><para>8</para></entry>
				</row>

				<row>
					<entry><para>Jude</para></entry>
					<entry><para>3</para></entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>Here is documentation source code for this table:</para>
	<programlisting language="xml"><![CDATA[<table>

	<title xml:id="Thisisanexampletable_42">This is an example table</title>

	<tgroup cols="2">
		<thead>
			<row>
				<entry><para>Name</para></entry>
				<entry><para>Hits</para></entry>
			</row>
		</thead>
		<tbody>
			<row>
				<entry><para>Bob</para></entry>
				<entry><para>5</para></entry>
			</row>

			<row>
				<entry><para>Mike</para></entry>
				<entry><para>8</para></entry>
			</row>

			<row>
				<entry><para>Jude</para></entry>
				<entry><para>3</para></entry>
			</row>
		</tbody>
	</tgroup>
</table>]]></programlisting>
	</section>

</section>



<section xml:id="DocBookLimitations"><info><title xml:id="DocBooklimitationsimposed_42">DocBook limitations imposed</title></info>


	<para>
		We restrict ourselves to a subset of docbook because we want a maintainable
		and uniform styled documentation. To achieve this goal, we require minimum learning
		investment from our ProActive developers, who are meant to be coding, not spending
		their time writing documentation. So you still want to add a fancy feature? Well, you
		can, as long as you describe how to use this new tag in this howto, and be
		extra careful with the pdf output.
	</para>

	<para>
		There is a schema specifying which are the allowed tags. You can only use the
		tags that this dtd allows. If you want more freedom, refer to <xref linkend="customizingTheDTD"/>.
		You can use the following tags:
		<itemizedlist>
			<listitem> <para>part, appendix, chapter, sect[1-5], title, para, emphasis, xref, link</para> </listitem>
			<listitem> <para>table, figure, caption, informalfigure, informaltable </para> </listitem>
			<listitem> <para>itemizedlist and orderedlist, listitem</para> </listitem>
			<listitem> <para>example, programlisting, screen, and literal</para> </listitem>
			<listitem> <para>The others that you might come along, albeit less frequently, are
			citation, email, indexterm, inlinemediaobject, note, answer, question, subscript, superscript  </para> </listitem>
		</itemizedlist>
	</para>
</section>
<section xml:id="DocBookCustomization"><info><title xml:id="StylesheetCustomization_42">Stylesheet Customization</title></info>


	<para>
		Here are a few notes on how you should go about customizing the output. That means,
		changing how the pdf and html are written.</para>

	<section xml:id="xsl.directory"><info><title xml:id="Filehierarchy_42">File hierarchy</title></info>

		<para>The files for configuration are the following:</para>

		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">common.xsl</emphasis> - This is where all
					the common specifications are made, i.e. those that go both in pdf and in
					html.
				</para>
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">pdf.xsl</emphasis> - This is where all the
					pdf specific customizations are made
				</para>
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">html.xsl</emphasis> - This is where most
					html specific customizations are made.
				</para>
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">onehtml.xsl</emphasis> and
					<emphasis role="bold">chunkedhtml.xsl</emphasis> - Specifics for html,
					the former on one page, "chunked", one file per chapter, for the
					latter.
				</para>
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">main.css</emphasis> - This is yet another
					extra layer on top of the html output.
				</para>
			</listitem>
		</itemizedlist>

		<para>
			You can find these files in the <literal>ProActive/doc/toolchain/xsl/</literal> directory except for the last one which is
			located on the <literal>ProActive/doc/src/</literal> directory.
		</para>
	</section>

	<section xml:id="Whatyoucanchange_42"><info><title>What you can change</title></info>


		<para>
			Basically, in the customization layers, you have full control (just
			do what you want). The only thing is that each block (template,
			variable...) should be described by a comment. That will help later users.
			As customization can get cryptic, make a special effort!
		</para>
	</section>

	<section xml:id="TheBible_42"><info><title>The Bible</title></info>

		<para>
			The book you want to have with you is the following: "DocBook XSL:
			The Complete Guide", Third Edition, by Bob Stayton, online version at
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.sagehill.net">http://www.sagehill.net</link>.
		</para>

		<para>
			Have a look at the index if you just want to change a little
			something in the customization. Parse through it at least once if you
			intend to do some heavy editing. I have found everything I needed in this
			book, but sometimes in unexpected sections.
		</para>
	</section>


<!-- The "os" attribute does not work. This section has therefore been removed waiting for the reason
	  of this dysfunction. -->
<!--	<section xml:id="xsl.profiling"><info><title xml:id="Profiling_42">Profiling</title></info>

		<para>
			If you want to write some stuff that should go in pdf but not html, or vice-versa,
			you want to do some "profiling". This is very easy to do, as it was needed and tuned
			for the processing stages. Add an "os" attribute to the sections you want to exclude,
			specifying the wanted output format in which it should only appear.
		</para>
		<screen> &lt;para os="pdf"&gt; This paragraph only appears in pdf output! &lt;/para&gt;</screen>
		<note>
			<para>
				Using the "os" attribute to specify the output is not elegant. Agreed. But
				in docbooki, there is no default attribute intended to express the expected output file format,
				and using the "role" attribute is discouraged.
			</para>
		</note>
		<para os="pdf"> PDF VERSION </para>
		<para os="html"> HTML VERSION </para>
	</section>-->

	<section xml:id="xsl.debugging"><info><title xml:id="TheXSLdebuggingnightmare_42">The XSL debugging nightmare</title></info>

		<para>
			If you are editing the xsl stylesheets, and are having a hard time figuring
			out what's happening, don't panic! Use many messages
			to find out what the values of the variables are at a given time:
			<programlisting language="xml"><![CDATA[<xsl:message>
	<xsl:text> OK, in question.toc, id is </xsl:text> <xsl:value-of select="$id" />
</xsl:message>

<xsl:for-each select="./@*">
	<xsl:message>
		Attribute <xsl:value-of select="name(.)"/> = <xsl:value-of select="."/>
	</xsl:message>
</xsl:for-each>]]></programlisting>
		</para>


		<para>
			You will very soon find that you still have to dig deeper into the templates,
			and they certainly are not easy to follow. Here's a little helper:
			<screen>java -cp $CLASSPATH org.apache.xalan.xslt.Process -TT -xsl ...  -in ... -out ...</screen>
			This uses the specified templates with the xsl file specified, but tracing every
			template called. Useful when you're wondering what's being called.
		</para>
	</section>

	<section xml:id="customizingTheDTD"><info><title xml:id="DocBooksubsetthedtd_42">DocBook subset: the dtd</title></info>

		<para>
			The dtd is the file detailing which are the allowed tags in our
			DocBook subset. Some tags have been removed, to make it easier to
			manage. Please refer to the file called
			<literal>ProActive/doc/src/docbook.dtd</literal> to know how much
			freedom you have been granted.
		</para>

		<para>
			When you run the manual generation through the ant tasks, the xml
			is checked for validity. The message you should see is
			<screen>[xml_validate] 1 file(s) have been successfully validated.</screen>
		</para>

		<para>
			If you happen to modify the dtd, you should put also copy it on
			the web, on <literal>/proj/oasis/www/proactive/doc/dtd/$version/</literal> or else
			the previous version one will always be used.
		</para>
	</section>

<!-- <section xml:id="TodolistprovidedbyDenis_42"><info><title>Todo list, provided by Denis</title></info>


  <orderedlist>

   <listitem>
    <para> Ensure no dead links exist (easy with wget \-\-spider OR http://www.dead-links.com/
     for html, harder for the pdf).</para>
   </listitem>

   <listitem>
    <para> Create an index, and put the main words in it</para>
   </listitem>

   <listitem>
    <para> All important code examples should be wrapped in EXAMPLE tags  </para>
   </listitem>

  </orderedlist>
 </section>-->

</section>

<section xml:id="DocAntTargets"><info><title xml:id="Anttargetsforbuildingthedocumentation_42">Ant targets for building the documentation</title></info>
	<section xml:id="JavadocTargets"><info><title xml:id="Javadocanttargets_42">Javadoc ant targets</title></info>
	<para>
		Ant targets for building javadoc documentation are the following ones:
	</para>
	<screen>doc.ProActive.doc.zips              Generate the ProActive Programming javadoc and manual zip archives
doc.ProActive.docs                  Generate the ProActive Programming javadoc, manual, and zip archives
doc.ProActive.javadoc.complete      Generate the ProActive Programming complete javadoc
doc.ProActive.javadoc.completeZip   Generate the ProActive Programming complete javadoc zip
doc.ProActive.javadoc.published     Generate the ProActive Programming published javadoc
doc.ProActive.javadoc.publishedZip  Generate the ProActive Programming published javadoc zip</screen>
	</section>
	<section xml:id="ManualTargets"><info><title xml:id="Manualgenerationanttargets_42">Manual generation ant targets</title></info>
	<para>
		Ant targets for building the ProActive documentation are the following ones:
	</para>
	<screen>doc.ProActive.manual                Generate all the ProActive Programming manuals  (html, single html, pdf)
doc.ProActive.manualHtml            Generate the ProActive Programming HTML manual
doc.ProActive.manualHtmlZip         Generate the ProActive Programming HTML manual zip
doc.ProActive.manualPdf             Generate the ProActive Programming PDF manual
doc.ProActive.manualSingleHtml      Generate the ProActive Programming single HTML manual
doc.ProActive.manualSingleHtmlZip   Generate the ProActive Programming single HTML manual zip
doc.ProActive.schemas               Build documentation for GCM schemas</screen>
	<para>
		The following picture describes the process of documentation generation:
	</para>
	<figure xml:id="Mainanttargetsusedinmanualgeneration_42"><info><title>Main ant targets used in manual generation</title></info>
	<mediaobject>
    <imageobject>
     <imagedata scalefit="1" width="100%" contentdepth="100%" align="center" fileref="images/png/documentation_process.png" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

	</section>
</section>

</chapter>


