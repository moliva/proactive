<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Security"><info><title xml:id="SecurityFramework_63">Security Framework</title></info>


  <para>In order to use the Proactive Security features, you have to
  install <emphasis role="bold">the Java(TM) Cryptography Extension (JCE)
  Unlimited Strength Jurisdiction Policy Files</emphasis> available at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/javase/downloads/index.jsp">Sun's website</link>.
  Extract the file and copy jar files to your &lt;jre_home&gt;/lib/security. That will override the <emphasis role="italics">local_policy.jar</emphasis> and <emphasis role="italics">US_export_policy.jar</emphasis> files,
  so if you want to be able to undo this operation, rename these files before copying the new ones.
  </para>

  <section xml:id="Overview_63"><info><title>Overview</title></info>


    <para>Usually, applications and security are developed for a specific use.
    We propose here a security framework that allows dynamic deployment of
    applications and security configuration according to this
    deployment.</para>

    <para>ProActive security mechanism provides a set of security features
    from basic ones like communications authentication, integrity, and
    confidentiality to more high-level features including secure object
    migrations, hierarchical security policies, and dynamically negotiated
    policies. All these features are expressed at the ProActive middleware
    level and used transparently by applications.</para>

    <para>It is possible to attach security policies to Runtimes, Virtual
    Nodes, Nodes and Active Objects. Policies are expressed inside an XML
    descriptor.</para>
  </section>

  <section xml:id="SecurityArchitecture_63"><info><title>Security Architecture</title></info>


    <section xml:id="Basemodel_63"><info><title>Base model</title></info>


      <para>A distributed or concurrent application built with
      <emphasis>ProActive</emphasis> is composed of a number of medium-grained
      entities called <emphasis>active objects</emphasis>. Each active object
      has one distinguished element, the <emphasis>root</emphasis>, which is
      the only entry point to the active object. All other objects inside the
      active object are called <emphasis>passive objects</emphasis> and cannot
      be referenced directly from objects which are outside of this active object
      (see <xref linkend="Settingupvirtualdistributedsandboxsatruntime_63" />).
	  This absence of sharing is important with respect to security.</para>

      <para><figure xml:id="Settingupvirtualdistributedsandboxsatruntime_63"><info><title>Setting up virtual distributed sandboxes at runtime</title></info>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/secureDeployment.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The security is based on Public Key Infrastructure. Each entity
      owns a certificate and an private key generated from a user's certificate.</para>

      <para>Certificates are generated automatically by the security
      mechanism. The validity of a certificate is checked by validating its
      certificate chain. As shown in the next figure, before validating the
      certificate of an active object, the certificate of the application and the user's
      one will be checked. If a valid path is found then the
      certificate of the object is validated.</para>

      <para><figure xml:id="Certificatechain_63"><info><title>Certificate chain</title></info>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/certificateGeneration.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section xml:id="Securityisexpressedatdifferentlevels_63"><info><title>Security is expressed at different levels</title></info>


      <para>Security is expressed at different levels, according to who wants
      to set policy:</para>

      <itemizedlist>
        <listitem>
          <para>Administrators set policy at the domain level. It contains general
          security rules.</para>
        </listitem>

        <listitem>
          <para>Resource provider set policy for resources. People who have
          access to a cluster and wants to offer CPU time under some
          restrictions. The runtime loads its policy file at launch
          time.</para>
        </listitem>

        <listitem>
          <para>Application level policy is set when an application is
          deployed through an XML descriptor.</para>
        </listitem>
      </itemizedlist>

      <para>The ProActive middleware will enforce the security policy of all
      entities interacting within the system, ensuring that all policies are
      applied.</para>

      <para><figure xml:id="Hierarchicalsecurity_63"><info><title>Hierarchical security</title></info>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/security-hierarchy.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>
  </section>

  <section xml:id="DetailedSecurityArchitecture_63"><info><title>Detailed Security Architecture</title></info>


    <section xml:id="NodesandVirtualNodes_63"><info><title>Nodes and Virtual Nodes</title></info>


      <para>The security architecture relies on two related abstractions for
      deploying Grid applications: <emphasis>Node</emphasis> and
      <emphasis>Virtual Node</emphasis>. A node gathers several objects in a
      logical entity. It provides an abstraction for the physical location of
      a set of activities. Objects are bound to a node at creation or after
      migration. In order to have a flexible deployment (eliminating from the
      source code machine names, creation protocols), the system relies on
      <emphasis>Virtual Nodes</emphasis> (VNs). A VN is identified as a name
      (a simple string), used in a program source, defined and configured in
      an descriptor. The user can attach policy to these virtual nodes.
      Virtual Nodes are used within application code to structure it. For
      example, an object which will be used as a server will be set inside a
      virtual node named "Server_VN" and client objects will
      be set inside a "Client_VN" virtual node. The user expresses policy between server and
      client object inside a descriptor file. The mapping between Virtual
      Nodes and Nodes is done when the application starts.</para>
    </section>

    <section xml:id="Security_html_SECTION00033000000000000000"><info><title xml:id="HierarchicalSecurityEntities_63">Hierarchical Security Entities</title></info>


      <para>Grid programming is about deploying processes (activities) on
      various machines. The final security policy that must be set for those
      processes depends on many factors: that is dictated by the
      application's policy, but other factor such as the machine locations, the security policies
      of their administrative domain, and the network being used to reach
      those machines has to be considered too.</para>

      <para>The previous section defined the notions of <emphasis>Virtual
      Nodes</emphasis> and <emphasis>Nodes</emphasis>. Virtual Nodes are
      application abstractions, and nodes are only a runtime entity resulting
      from the deployment: a mapping of Virtual Nodes to processes and hosts.
      A first decisive feature allows the definition of application-level
      security on those abstractions:</para>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/img3.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>Thus, virtual nodes are the foundation for intrinsic
      application level security. If, at design time, it appears that a
      process always requires a specific level of security (e.g. authenticated
      and encrypted communications all the time), then that process should be
      attached to a virtual node on which those security features are imposed.
      It is the designer responsibility to structure his/her application or
      components into virtual node abstractions compatible with the required
      security. Whatever deployment occurs, those security features will be
      maintained. We expect this case to occur infrequently, for instance in
      very sensitive applications where even an intranet deployment calls for
      encrypted communications.</para>

      <para>The second decisive feature deals with a major Grid aspect:
      deployment-specific security. The issue is actually twofold:</para>

      <orderedlist>
        <listitem>
          <para>allowing organizations (security domains) to specify general
          security policies,</para>
        </listitem>

        <listitem>
          <para>allowing application security to be specifically adapted to a
          given deployment environment.</para>
        </listitem>
      </orderedlist>

      <para>Domains are a standard way to structure (virtual) organizations
      involved in a Grid infrastructure; they are organized in a hierarchical
      manner. This logical concept allows the expression of
      security policies in a hierarchical way.</para>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/img4.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>This principle deals with the two issues mentioned above:</para>

		<itemizedlist>
			<listitem>
			  <para>The administrator of a domain can define specific policy rules
			  that must be obeyed by the applications running within the domain.
			  However, a general rule expressed inside a domain may prevent the
			  deployment of a specific application. To solve this issue, a policy rule
			  can allow a well-defined entity to weaken it. As we are in a
			  hierarchical organization, allowing an entity to weaken a rule means
			  allowing all included entities to weaken the rule. The entity can be
			  identified by its certificate;</para>
			</listitem>
			<listitem>
			  <para>a Grid user can, at the time he runs an application, specify
			  additional security based on the domains being deployed onto.</para>
			</listitem>
		</itemizedlist>


      <para>The Grid user can specify additional rules directly in his
      deployment descriptor for the domains his application is deployed on. Note that those
      domains are actually dynamic as they can be obtained through external
      allocators, or even Web Services in an OGSA infrastructure (see
      <citation><xref endterm="foster98security.abbrev" linkend="foster98security"/></citation>). Catch-all rules might be
      important in that case to cover all cases, and to provide a conservative
      security strategy for unforeseen deployments.</para>

      <para>Finally, as active objects are active and mobile entities, there
      is a need to specify security at the level of such entities.</para>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/img6.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>In open applications, e.g. several principals interacting in a
      collaborative Grid application, a JVM (a process) launched by a given
      principal can actually host an activity executing under another
      principal. The security of this latter principal has to be
      retained in such a case. Moreover, it can also serve as a basis to
      offer, in a secure manner, hosting environments for mobile
      agents.</para>

      <para><figure xml:id="Syntaxandattributesforpolicyrules_63"><info><title>Syntax and attributes for policy rules</title></info>


          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/img8.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section xml:id="Security_html_SECTION00034000000000000000"><info><title xml:id="Resourceprovidersecurityfeatures_63">Resource provider security features</title></info>


      <para>Prior to an application starting on a grid, a user needs to
      acquire some resources (CPU time, disk storage, bandwidth) from the
      grid. A <emphasis>resource provider</emphasis> is an individual, a
      research institute or an organization who wants to offer some resources
      under a certain security policy to a restricted set of people.
      According to our definition, the resource provider will set up one or
      more runtimes where clients will be able to perform computation. Each
      runtime is set with its own policy. Theses runtimes could be globally
      distributed.</para>
    </section>

    <section xml:id="Security_html_SECTION00037000000000000000"><info><title xml:id="InteractionsSecurityAttributes_63">Interactions, Security Attributes</title></info>


      <para>Security policies are able to control all the
      <emphasis>interactions</emphasis> that can occur when deploying and
      executing a multi-principals Grid application. With this goal in mind,
      interactions span the creation of processes, to the monitoring of
      activities (Objects) within processes, including of course the
      communications. Here is a brief description of those
      interactions:</para>

      <indexterm>
        <primary>Migration</primary>

        <secondary>security</secondary>
      </indexterm>

      <itemizedlist>
        <listitem>
          <para>RuntimeCreation (RC): creation of a new Runtime process</para>
        </listitem>

        <listitem>
          <para>NodeCreation (NC): creation of a new Node within a Runtime (as
          the result of Virtual Node mapping)</para>
        </listitem>

        <listitem>
          <para>CodeLoading (CL): loading of bytecode within a Node, used in
          presence of object migration.</para>
        </listitem>

        <listitem>
          <para>ObjectCreation (OC): creation of a new activity (active
          object) within a Node</para>
        </listitem>

        <listitem>
          <para>ObjectMigration (OM): migration of an existing activity object
          to a Node</para>
        </listitem>

        <listitem>
          <para>Request (Q), Reply (P): communications, method calls and
          replies to method calls</para>
        </listitem>

        <listitem>
          <para>Listing (L): list the content of an entity; for Domain/Node
          provides the list of Node/Objects, for an Object allows to monitor
          its activity.</para>
        </listitem>
      </itemizedlist>

      <para>For instance, a domain is able to specify that it accepts
      downloading code from a given set of domains, whose transfer
      has been authenticated and guaranteed not to be altered. As a policy
      might allow un-authenticated communications, or because a domain (or
      even country) policy may specify that all communications are
      un-encrypted, the three security attributes Authentication (A),
      Integrity (I) and Confidentiality (C) can be specified in three modes:
      Required (<emphasis role="bold">+</emphasis>), Optional (<emphasis role="bold">?</emphasis>), Disallowed (<emphasis role="bold">-</emphasis>)</para>

      <para>For example, the tuple [+A,?I,-C] means that authentication is
      required, integrity is accepted but not required, and confidentiality is
      not allowed.</para>

      <para>As grids are decentralized, without a central administrator
      controlling the correctness of all security policies, these policies
      must be <emphasis>combined</emphasis>, <emphasis>checked</emphasis>, and
      dynamically <emphasis>negotiated</emphasis>. The next two sections
      discuss how this is done.</para>
    </section>

    <section xml:id="Security_html_SECTION00038000000000000000"><info><title xml:id="CombiningPolicies_63">Combining Policies</title></info>


      <para>As the proposed infrastructure takes into account different actors
      of the grid (e.g. domain administrator, grid user), even for a
      single-principal single-domain application, there are potentially
      several security policies to be considered. This section deals with the
      combination of those policies to obtain the final security tuple of a
      single entity. An important principle being is <emphasis role="bold">a sub-domain cannot
      weaken the rules of its super-domains</emphasis>.</para>

      <para>During execution, each activity (Active Object) is always included
      in a <emphasis>Node</emphasis> (due to the Virtual Node mapping) and at
      least in one <emphasis>Domain</emphasis>, the one used to launch a JVM
      (D<subscript>0</subscript>). <xref linkend="HierarchicalSecurityLevels"/> hierarchically represents the
      security rules that can be activated at execution: from the top,
      hierarchical domains (D<subscript>1</subscript> to
      D<subscript>0</subscript>), the virtual node policy (VN), and the Active
      Object (AO) policy. Of course, such policies can be inconsistent, and
      there must be clear principles to combine the various sets of
      rules.</para>

      <para><figure xml:id="HierarchicalSecurityLevels"><info><title xml:id="HierarchicalSecurityLevels_63">Hierarchical Security Levels</title></info>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/img11.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>There are three main principles:</para>
	  <orderedlist>
		  <listitem>
			  <para>
				choosing the <emphasis>most specific rules</emphasis>
				within a given domain (as a single grid actor is responsible for it),
			  </para>
		  </listitem>
		  <listitem>
			  <para>
				an interaction is valid only if all levels
				accept it (absence of weakening of authorizations),
			  </para>
		  </listitem>
		  <listitem>
			  <para>
				the security retained attributes are the most constrained based on a partial order
				(absence of weakening of security).
			  </para>
		  </listitem>
	  </orderedlist>

	  <para>Let us consider the following example,
      where the catch-all rule specifies that all Requests (Q) and Replies (P)
      must be authenticated, integrity checked, and confidential, but
      within the specific "CardPlus" domain integrity and confidentiality will
      be optional.</para>

      <screen>Domain[*] -&gt; Domain[*]: Q,P: [+A,+I,+C]
Domain[CardPlus] -&gt; Domain[CardPlus]: Q,P: [+A,?I,?C]</screen>

      <para>This means that for any activity taking place within the CardPlus
      domain, the second rule will be chosen (integrity and confidentiality
      will be optional), as the catch-all rule is less-specific than the
      "CardPlus" domain rule, and there is no hierarchical domain relationship
      between the two rules. Of course, comparison of rules is only a partial
      order, and several incompatible most specific rules can exist within a
      single level (e.g. both ACCEPT and DENY most specific rules for the same
      interaction, or both +A and -A).</para>

      <para>Between levels, an incompatibility can also occur, especially if a
      sub-level attempts to weaken the policy on a given interaction (e.g. a
      domain prohibits confidentiality [-C] while a sub-domain or the Virtual
      Node requires it [+C], a domain D<subscript>i</subscript> prohibits
      loading of code while D<subscript>j</subscript> (j &lt;= i) authorizes
      it). In all incompatible cases, the interaction is not authorized and an
      error is reported.</para>
    </section>

    <section xml:id="DynamicPolicyNegotiation_63"><info><title>Dynamic Policy Negotiation</title></info>


      <para>During execution, entities interact in a pairwise fashion.
	  For each interaction (JVM creation, communication, migration,
      ...), each entity will want to apply a security policy based on the resolution
      presented in the previous section. Before starting an interaction, a
      <emphasis>negotiation</emphasis> occurs between the two entities
      involved. <xref linkend="Result_of_security_negotiations"/> shows the
      result of such negotiation. For example, if for a given interaction,
      entity A's policy is [+A,?I,?C], and B's policy is [+A,?I,-C], the
      negotiated policy will be [A,?I,-C]. If both policies specify an
      attribute as optional, the attribute is not activated.</para>

      <para>The other case which leads to an error is when an attribute is
      required by one, and disallowed by the other. In such a case, the
      interaction is not authorized and an error is reported. If the two
      entities security policies agree, then the interaction can occur. In the
      case that the agreed security policy includes confidentiality, the two
      entities negotiate a session key.</para>

		<figure xml:id="Result_of_security_negotiations">
			<title xml:id="Resultofsecuritynegotiations_63">Result of security negotiations</title>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/negotiation.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>
    </section>

    <section xml:id="MigrationandNegotiation_63"><info><title>Migration and Negotiation</title></info>


      <indexterm>
        <primary>Migration</primary>

        <secondary>security</secondary>
      </indexterm>

      <para>In large scale grid applications, migration of activities is an
      important issue. The migration of Active Objects must not weaken the
      security policy being applied.</para>

      <para>When an active object migrates to a new location, three scenarios
      are possible:</para>

      <itemizedlist>
        <listitem>
          <para>the object migrates to a node belonging to the same virtual
          node and included in the same domain. In this case, all negotiated
          sessions remain valid.</para>
        </listitem>

        <listitem>
          <para>the object migrates to a known node (created during the
          deployment step) but which belongs to another virtual node. In this
          case, all current negotiated sessions become invalid. This kind of
          migration requires to reestablish the object security policy, and if
          it changes, to renegotiate with interacting entities.</para>
        </listitem>

        <listitem>
          <para>The object migrates to an unknown node (not known at the
          deployment step). In this case, the object migrates with a copy of
          the application security policy. When a secured interaction takes
          place, the security system retrieves not only the object's
          application policy but also policies rules attached to the node on
          which the object is to compute the policy.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="Howtocreatepolicyfilesandcertificates_63"><info><title>How to create policy files and certificates</title></info>


    <para>A GUI has been created to facilitate certificate generation. It is a
    RCP plugin shipped with the IC2D tool. Once IC2D started, go to
	<emphasis role="bold">Window -&gt; Open Perspective -&gt; Other...</emphasis> and select <emphasis role="bold">Security</emphasis>.</para>

	<para>The following window should then appear:</para>

     <para><figure xml:id="TheIC2DSecurityPerspective"><info><title>The IC2D Security Perspective</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_security_perspective.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>

	<para>
		From this tab, you can generate a root certificate filling the certificate information column and clicking on
		<emphasis role="bold">Generate self signed certificate</emphasis>.
	</para>

     <para><figure xml:id="SecurityRootCertificate"><info><title>Creating a root certificate</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_root_certificate.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>

	<para>
		Then, you can generate a child certificate filling the certificate information column and clicking on
		<emphasis role="bold">Generate child certificate</emphasis> after having selected the parent certificate on the second column.
	</para>

     <para><figure xml:id="SecurityChildCertififcate"><info><title>Creating a child certificate</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_child_certificate.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>

	  <para>Once you have generated all the certificates you need, you can drag and drop the ones you want to activate from the second column to the last one.
		Activating certificates allows you to use them afterwards for rule creation. It also allows you to save them into a file.
	  </para>

     <para><figure xml:id="SecurityActiveKeytore"><info><title>Activating a keystore</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_active_keystore.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>

	<para>Now, let us have a look at the <emphasis role="italics">Keystore Editor</emphasis> tab. This tab allows you to get some information on the generated
	keytores, to save them into files or to load some others to be used after for rule edition.
    Certificates are saved under a PKCS12 format (extension .p12). This
    format is natively supported by the ProActive Security mechanism.</para>

	<para><figure xml:id="SecurityKeystoreEditor"><info><title>Keystore Editor</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_keystore_editor.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>


	<para>Finally, you can use the <emphasis role="italics">Rule Editor</emphasis> tab to edit your rules.
	These rules can be saved into a policy file using the <emphasis role="italics">Save rules</emphasis> button.
	To get familiar with the generated policy file, please refer to <xref linkend="TheXMLSecurityDescriptorindetails_63" />.
	To create a new rule, you just have to click on the <emphasis role="italics">New</emphasis> button and then fill the right panel.
	The <emphasis role="italics">From</emphasis> and <emphasis role="italics">To</emphasis> part can be filled by drag and drop from the
	<emphasis role="italics">ActiveKeystore</emphasis> column.
	</para>
	<para><figure xml:id="SecurityRuleEditor"><info><title>Rule Editor</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_rule_editor.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>


	<para>The last tab, <emphasis role="italics">Sessions browser</emphasis>, cannot be used directly. It is used to see certificate details at runtime.
	To do this, you have to monitor your application with IC2D and then, you can click right on an active object and select <emphasis role="bold">Export SM to Security view</emphasis>.
	You will then have access to a window looking as follows:
	</para>

	<para><figure xml:id="SecuritySessionBrowser"><info><title>Session Browser</title></info>
        <mediaobject>
          <imageobject>
            <imagedata scale="70" fileref="images/png/security_gui_sessions_browser.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure></para>
  </section>

 <section xml:id="Activatingsecuritymechanism_63"><info><title>Activating security mechanism</title></info>


    <para>Within the deployment descriptor, the &lt;security&gt; tag is used
    to specify the policy for the deployed application. It will be the policy
    for all the created Nodes and Active Objects. The following example shows
    an example of a deployment descriptor with such a &lt;security&gt; tag:</para>

	<programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_XML_Descriptor.snip"/></textobject></programlisting>
</section>



 <section xml:id="TheXMLSecurityDescriptorindetails_63"><info><title>The XML Security Descriptor in details</title></info>


    <para>Inside the policy file, you can express policy between entities
    (domain, runtime, node, active object).</para>

    <para>The entity tag can be used to:</para>

    <itemizedlist>
      <listitem>
        <para>express policies on entities described inside the descriptor
        (lines 13, 15)</para>
      </listitem>

      <listitem>
        <para>express policies on existing entities by specifying theirs
        certificates (line 32).</para>
      </listitem>
    </itemizedlist>

    <section xml:id="ConstructionofanXMLpolicy_63"><info><title>Construction of an XML policy:</title></info>


      <para>A policy file must begin with:</para>

	  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_1.snip"/></textobject></programlisting>

      <para>Next, application specific information is given.
	  <emphasis role="italics">&lt;ApplicationName&gt;</emphasis> sets the application name. This allows
      easy identification of which application an entity belongs to.</para>

	  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_2.snip"/></textobject></programlisting>


      <para><emphasis role="italics">&lt;PKCS12KeyStore&gt;</emphasis> describes the path to the keystore created
      using the graphical interface. The path could be either absolute or
      relative. An absolute path contains the whole path (starting with / under
      Unix systems or a letter under Windows systems). A relative path
      describes the path to follow from the policy file in order to find the
      keystore file. For instance, setting just the name of the keystore file
      indicates that the file is located under the same directory as the one of the policy
      file.</para>

	  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_3.snip"/></textobject></programlisting>

      <para><emphasis role="italics">&lt;CertificationAuthority&gt;</emphasis> contains all trusted certificate authority certificates.</para>

	  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_4.snip"/></textobject></programlisting>

      <para>Then we can define policy rules. All rules are located within the
      <emphasis role="italics">&lt;Rules&gt;</emphasis> tag. A <emphasis role="italics">&lt;Rule&gt;</emphasis> is constructed according to the following
      syntax:</para>

	  <itemizedlist>
		  <listitem>
			  <para><emphasis role="italics">&lt;From&gt;</emphasis> tag contains all entities from which the interaction
			  is made (source). It is possible to specify many entities in order to
			  match a specific fine-grained policy.</para>

			  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_5.snip"/></textobject></programlisting>

			  <para><emphasis role="italics">&lt;Entity&gt;</emphasis> is used to define an entity. the 'type' parameter
			  can be 'VN', 'certificate', or 'DefaultVirtualNode'.</para>

			  <itemizedlist>
				<listitem>
				  <para>'VN' (Virtual Node) referrers to virtual nodes defined inside
				  the deployment descriptor.</para>
				</listitem>

				<listitem>
				  <para>'DefaultVirtualNode' is a special tag. This is taken as the
				  default policy. The "name" attribute is ignored.</para>
				</listitem>

				<listitem>
				  <para>'certificate' requires that the path to the certificate is set
				  inside the 'name' parameters.</para>
				</listitem>
			  </itemizedlist>
		  </listitem>
		  <listitem>
			  <para><emphasis role="italics">&lt;To&gt;</emphasis> tag contains all entities onto which the interaction is
			  made (targets). As with the <emphasis role="italics">&lt;From&gt;</emphasis> tag, many entities can be
			  specified.</para>

			  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_6.snip"/></textobject></programlisting>
		  </listitem>
		  <listitem>
			  <para>The <emphasis role="italics">&lt;Communication&gt;</emphasis> tag defines security policies to apply
			  to requests and replies.</para>

			  <para><emphasis role="italics">&lt;Request&gt;</emphasis> sets the policy associated with a request. The
			  <emphasis role="italics">'value'</emphasis> parameter can be:</para>

			  <itemizedlist>
				<listitem>
				  <para><emphasis role="italics">'authorized'</emphasis> means a request is authorized.</para>
				</listitem>

				<listitem>
				  <para><emphasis role="italics">'denied'</emphasis> means a request is denied.</para>
				</listitem>
			  </itemizedlist>

			  <para>Each attribute of the <emphasis role="italics">&lt;Attributes&gt;</emphasis> tag (<emphasis role="italics">authentication</emphasis>,
			  <emphasis role="italics">integrity</emphasis>, <emphasis role="italics">confidentiality</emphasis>) can be set to <emphasis role="italics">'required'</emphasis>,
			  <emphasis role="italics">'optional'</emphasis> or <emphasis role="italics">'denied'</emphasis>.</para>

			  <para><emphasis role="italics">&lt;Reply&gt;</emphasis> tag has the same parameters as
			  <emphasis role="italics">&lt;Request&gt;</emphasis></para>

			  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_7.snip"/></textobject></programlisting>
		  </listitem>
		  <listitem>
			  <para><emphasis role="italics">&lt;Migration&gt;</emphasis> controls migration between <emphasis role="italics">&lt;From&gt;</emphasis> and
			  <emphasis role="italics">&lt;To&gt;</emphasis> entities. Values can be <emphasis role="italics">'denied'</emphasis> or <emphasis role="italics">'authorized'</emphasis>.</para>

			  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_8.snip"/></textobject></programlisting>
		  </listitem>
		  <listitem>
			  <para><emphasis role="italics">&lt;OACreation&gt;</emphasis> controls creation of active objects by
			  <emphasis role="italics">&lt;From&gt;</emphasis> entities onto <emphasis role="italics">&lt;To&gt;</emphasis> entities.</para>

			  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_9.snip"/></textobject></programlisting>
		  </listitem>
	  </itemizedlist>

      <para>Here is a complete security policy:</para>
	  <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/Security_Policy_0.snip"/></textobject></programlisting>


      <para>Note that the JVM that reads the deployment descriptor should be
      started with a security policy. In order to start a secure JVM, you need
      to use the property proactive.runtime.security and give a path a
      security file descriptor.</para>

      <para>Here is an example:</para>

      <screen>java -Dproactive.runtime.security=descriptors/security/jvmlocal.xml TestSecureDeployment secureDeployment.xml</screen>
    </section>
  </section>







</chapter>
