<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="AddingAFaultToleranceProtocol"><info><title xml:id="AddingaFaultToleranceProtocol_32">Adding a Fault-Tolerance Protocol</title></info>

	<para>
		This documentation is a quick overview of how to add a new
		fault-tolerance protocol within ProActive.
    </para>
	<section xml:id="ActiveObjectside_32"><info><title>Active Object side</title></info>

		<para>
			Fault-tolerance mechanism in ProActive is mainly based
			on the
			<literal>
				org.objectweb.proactive.core.body.ft.protocols.FTManager
			</literal>
			class. This class contains several hooks that are called
			before and after the main actions of an active object
			(e.g. sending or receiving a message, serving a request, etc.)
		</para>
		<para>
			For example, with the Pessimistic Message Logging
			protocol (PML), messages are logged just before the
			delivery of the message to the active object. Main
			methods for the FTManager of the PML protocol are then:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/PML_Protocol_1.snip" /></textobject></programlisting>
		<para>
			The local variable
			<literal>this.storage</literal>
			is a remote reference to the checkpoint server. The
			FTManager class contains a reference to each
			fault-tolerance server: fault-detector, checkpoint
			storage and localization server. Those reference are
			initialized during the creation of the active object.
		</para>
		<para>
			A FTManager has to define also a
			<literal>beforeRestartAfterRecovery()</literal>
			method, which is called when an active object is
			recovered. This method usually restore the state of the
			active object so as to be consistent with the others
			active objects of the application.
		</para>
		<para>
			For example, with the PML protocol, all the messages
			logged before the failure has to be delivered to the
			active object. The method
			<literal>beforeRestartAfterRecovery()</literal>
			thus looks like:
		</para>
		<programlisting language="java"><textobject><textdata fileref="automatic_snippets/PML_Protocol_2.snip" /></textobject></programlisting>
		<para>
			The parameter
			<literal>ci</literal>
			is a
			<literal>
				org.objectweb.proactive.core.body.ft.checkpointing.CheckpointInfo
			</literal>.
			This object contains all the information linked to
			the checkpoint used for recovering the active object,
			and is used to restore its state. The programmer might
			define his own class implementing
			<literal>CheckpointInfo</literal>,
			to add needed information, depending on the protocol.
		</para>
	</section>
	<section xml:id="Serverside_32"><info><title>Server side</title></info>

		<para>
			ProActive includes a global server that provides fault
			detection, active object localization, resource service
			and checkpoint storage. For developing a new
			fault-tolerance protocol, the programmer might specify
			the behavior of the checkpoint storage by extending the
			<literal>
				org.objectweb.proactive.core.body.ft.servers.storage.CheckpointServerImpl
			</literal> class.
			For example, only for the PML protocol and not for the
			CIC protocol, the checkpoint server must be able to synchronously log
			messages. The other parts of the server
			can be used directly.
		</para>
		<para>
			To specify the recovery algorithm, the programmer has to
			extend the
			<literal>
				org.objectweb.proactive.core.body.ft.servers.recovery.RecoveryProcessImpl
			</literal> class.
			In the case of the CIC protocol, all the active object
			of the application must recover after one failure, while
			only the faulty process must restart with the PML
			protocol. This specific behavior is coded in the
			recovery process.
		</para>
	</section>

</chapter>
