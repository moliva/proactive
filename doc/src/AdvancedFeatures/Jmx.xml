<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="JMX"><info><title>An extended ProActive JMX Connector</title></info>


	<section xml:id="jmx_overview"><info><title>Overview of JMX &mdash; Java Management eXtension</title></info>

		<para>
			<emphasis role="bold">
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/">
					JMX
				</link>
			</emphasis>
			(Java Management eXtensions) is a Java technology providing
			tools and APIs for managing and monitoring Java applications
			and their resources. Resources are represented by objects
			called Managed Beans (MBeans).
		</para>

      <figure xml:id="JMX3levelsarchitecture"><info><title>
            This figure shows the JMX 3-level architecture and
            the integration of the ProActive JMX Connector.
         </title></info>
         <mediaobject>
            <imageobject>
               <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/jmx-proactive-resized.png" format="PNG"/>
            </imageobject>
         </mediaobject>
      </figure>

		<para>
			JMX defines a 3-layer management architecture:
			<itemizedlist>
				<listitem>
					<para><emphasis>The Instrumentation Level</emphasis>
					contains MBeans and their manageable resources. A
					Mbean is a Java Object implementing a specific
					interface and pattern. They contain and define the
					manageable attributes, the management operations
					that can be performed onto resources and the
					notifications that can be emitted by the resources.</para>
				</listitem>
				<listitem>
					<para><emphasis>The Agent Level</emphasis>
					acts as a MBeans containers (the
					MBeanServer) and controls them. This level
					represents the main part in the JMX specification
					since it gives access to the managed resources from
					the clients. The agent level is the central
					level of the architecture.</para>
				</listitem>
				<listitem>
					<para><emphasis>The Distributed Level</emphasis>
					enables the remote management
					of Java applications. In order to remotely access to
					managed applications, JMX specification defines two
					types of remote access: protocol adaptors and
					protocol connectors. Connectors allow a manager to
					perform method calls onto a distant agent's
					MBeanServer (for example RMI). Adaptors are
					components that ensure binding between a specific
					protocol (for example for SNMP or HTTP) and the
					managed resources. Indeed, they enable Mbeans to be
					accessed by existing approaches.</para>
				</listitem>
			</itemizedlist>

		</para>
	</section>
	<section xml:id="jmx_connector"><info><title>Asynchronous ProActive JMX connector</title></info>

		<para>
			The JMX technology defines a connector based on RMI. The RMI
			connector allows the manager to connect to an MBean in a
			MBeanServer from a remote location and performs operations
			on it.
		</para>
		<para>
			We defined a ProActive Connector according to the
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://jcp.org/en/jsr/detail?id=160">
				JMX Remote API JSR 160
			</link>
			that enables asynchronous remote access to a JMX Agent
			thanks to ProActive. This connector is based on a call via
			an active object. When invoking the standard API
			specification methods, the access to the managed application
			is synchronous, because the JMX remote API provides
			non-reifiable methods. For example, the <literal>invoke()</literal> method,
			allowing to invoke a Mbean's method, throws exceptions:
			<programlisting language="java">public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature)
   throws InstanceNotFoundException, MBeanException, ReflectionException, IOException;</programlisting>

		</para>
			<para>
				We have extended the API in order to provide asynchronous
				access thanks to additionnal reifiable methods. The
				additional <literal>invoke()</literal> method looks like as follows:
			</para>
			<programlisting language="java">public GenericTypeWrapper invokeAsynchronous(ObjectName name, String operationName, Object[] params, String[] signature)</programlisting>
			<para>
				Thus, all requests sent to the MBean are put in the
				active object requests queue and a future object is
				returned to the client.
			</para>
	</section>

	<section xml:id="Howtousetheconnector"><info><title>How to use the connector?</title></info>

		<para>
			The ProActive connector allows you to connect an MBean in
			an MBean server to a remote location, and perform operations
			on it, exactly as if the operations were being performed
			locally.
		</para>
		<para>
			To perform such a call, you have first to create the server
			connector on the application you wish to manage. This is
			simply done by adding one line of code in the application:
			<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JMX_ServerConnector.snip" /></textobject></programlisting>
			Once the connector server part launched, any ProActive JMX
			connector client can connect to it and manage the
			application thanks to the ClientConnector class.
			<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JMX_ClientConnector_1.snip" /></textobject></programlisting>
			To perform remote operations on a given MBean, you have to
			get the reference of the current MBeanServerConnection,
			which is actually a ProActiveConnection:
			<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JMX_ClientConnector_2.snip" /></textobject></programlisting>
		</para>

		<note>
			<para>
				To know all available methods on a
				<literal>MBeanServerConnection</literal>, have a look at the
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServerConnection.html">MBeanServerConnection javadoc</link>.
			</para>
		</note>

	</section>


	<section xml:id="notifications"><info><title>JMX Notifications through ProActive</title></info>

		<para>
			The JMX specification defines a notification mechanism, based
			on java events and allowing to alert client
			management applications. To use JMX notifications, one has
			to use a listener object that is registered within the MBean
			server. On the server side, the MBean has to implement the
			<literal>NotificationBroadcaster</literal> interface.

			As we work in a distributed environment, listeners are
			located remotely and thus, have to be joined remotely.
			Hence, the
			<emphasis>
				listener must be a serializable active object
			</emphasis>
			and added as a <literal>NotificationListener</literal>:

			<programlisting language="java"><textobject><textdata fileref="automatic_snippets/JMX_ClientConnector_3.snip" /></textobject></programlisting>
		</para>
		<note>
			<para>
				More informations on JMX on:
				<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/developer/technicalArticles/J2SE/jmx.html">
					Getting Started with Java Management Extensions
					(JMX): Developing Management and Monitoring
					Solutions
				</link>
			</para>
		</note>
	</section>
	<section xml:id="ExampleasimpletextualJMXConsole"><info><title>Example: a simple textual JMX Console</title></info>


		<para>
			The example available in the <literal>$PROACTIVE_HOME/examples/jmx/</literal> directory,
			is a simple textual tool to connect to a remote MBeanServer
			and list available domains and mbeans registered in this
			server.
		</para>

		<para>
			To launch the connector server side, execute the
			<literal>connector.[sh|bat]</literal> script. To connect this server, execute the
			<literal>simpleJmx.[sh|bat]</literal> script and specify the MBean serber name where is
			hosted the Mbean server:
			<screen>--- JMC Test client connector---------------------------------------------
Enter the name of the JMX MBean Server :  [default is '//localhost/serverName']
(Type "exit" to quit)</screen>
			Just typing <literal>Enter</literal> should work since the server location of the mbean server launched
			with the <literal>connector.[sh|bat]</literal> script is the default one.
		</para>
		<para>
			The console shows the domains list:
			<screen>Registered Domains :
	[ 0 ] JMImplementation
	[ 1 ] com.sun.management
	[ 2 ] org.objectweb.proactive
	[ 3 ] org.objectweb.proactive.core.runtimes
	[ 4 ] org.objectweb.proactive.core.node
	[ 5 ] java.lang
	[ 6 ] java.util.logging

Type the domain number to see all registered MBeans in this domain :</screen>
		</para>
		<para>
			By choosing a specific domain, the console will show the
			Mbeans registered in this domain:
		</para>
		<para>
			Choosing the <literal>java.lang</literal> domain, you should see the following registered MBeans:
			<screen>[ 0 ] java.lang:type=OperatingSystem
[ 1 ] java.lang:type=Compilation
[ 2 ] java.lang:type=MemoryPool,name=PS Old Gen
[ 3 ] java.lang:type=Memory
[ 4 ] java.lang:type=MemoryPool,name=PS Perm Gen
[ 5 ] java.lang:type=Runtime
[ 6 ] java.lang:type=GarbageCollector,name=PS MarkSweep
[ 7 ] java.lang:type=Threading
[ 8 ] java.lang:type=GarbageCollector,name=PS Scavenge
[ 9 ] java.lang:type=ClassLoading
[ 10 ] java.lang:type=MemoryPool,name=PS Survivor Space
[ 11 ] java.lang:type=MemoryManager,name=CodeCacheManager
[ 12 ] java.lang:type=MemoryPool,name=Code Cache
[ 13 ] java.lang:type=MemoryPool,name=PS Eden Space
[ D ]  Domains list

Type the mbean number to see its properties :</screen>

			If you wish to get information about Memory, choose 3,
			and the console will show the whole information about
			this MBean.
	</para>
	</section>
</chapter>
