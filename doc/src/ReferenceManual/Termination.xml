<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ProActiveTermination"><info><title>How to terminate a ProActive application</title></info>

    <indexterm>
      <primary>Kill</primary>
      <secondary>Nodes</secondary>
    </indexterm>
	<section xml:id="Destroyingactiveobjects_1"><info><title>Destroying active objects</title></info>

		<para>In the master slave paradigm, the master should wait for all of
		its slaves to be known. Then all active objects can be destroyed by
		letting the master terminate all the slaves and then itself.</para>

		<para>In a more complex topology, a distributed termination algorithm
		must be designed to coordinate the <emphasis role="italics">PAActiveObject.terminateActiveObject()</emphasis>
		method calls.</para>

		<para>The simplest alternative is to enable the <emphasis role="bold">Distributed Garbage Collector (DGC)</emphasis> by setting the
		<emphasis>proactive.dgc</emphasis> property to <emphasis>true</emphasis>
		and let it destroy unreferenced active objects and cycles of idle active
		objects.
		<newline/>
		The DGC is the bridge between active objects and the local GC.
		It automatically calls the <literal>PAActiveObject.terminateActiveObject()</literal> method on
		unreachable active objects so that you do not have to.</para>

		<para>The default configuration should be suitable in most case, but
		it is possible to alter the timing of the DGC algorithm using two
		parameters: <emphasis>proactive.dgc.ttb</emphasis> and
		<emphasis>proactive.dgc.tta</emphasis>.</para>

		<para><emphasis>proactive.dgc.ttb</emphasis> specifies the period of the
		heartbeat in milliseconds, and <emphasis>proactive.dgc.tta</emphasis>
		specifies the time to wait in milliseconds before assuming a beat was
		received from all referencers.</para>

		<para>Scientifically speaking, <emphasis>proactive.dgc.tta</emphasis> must
		be much greater than <emphasis>proactive.dgc.ttb</emphasis> to account for
		the network latency. By default, <emphasis>proactive.dgc.ttb</emphasis> is
		30 seconds and <emphasis>proactive.dgc.tta</emphasis> is 150 seconds.</para>

		<para>When using the DGC, it's possible that because of references kept in
		user threads, garbage is not found as quickly as desired.
		<newline/>
		To this end, the
		<emphasis>PALifeCycle.userThreadTerminated()</emphasis> method should be
		called at the end of the main thread. This instructs the DGC that at this
		point, active objects referenced in user threads will not be used anymore.
		</para>

		<para>Both explicit termination (calling terminateActiveObject()) and implicit
		termination (letting the DGC call it) trigger the call of the potentially
		endActivity() method in the terminated active object.</para>
	</section>
	<section xml:id="KillingJVMs_1"><info><title>Killing JVMs</title></info>

		<para>Once active objects are destroyed, JVMs must be killed in order
		to complete the cleanup. Alternatively, one can focus on killing the
		JVMs, that will get rid of the active objects too.</para>

		<para>Depending on which deployment you have used (GCM or XML Deployment), this action can be done by calling
		a method on the descriptor object.</para>


		<section xml:id="KillingJVMs_GCM"><info><title>Killing JVMs started with a GCM Deployment</title></info>

			<para>If you have used the GCM Deployment to deploy your active objects on several hosts, you can kill the deployed JVMs as well as theirs hosted active objects by calling
			the <emphasis role="italics">kill()</emphasis> method on the descriptor object.</para>

			<programlisting language="java">GCMApplication gcmad = PAGCMDeployment.loadApplicationDescriptor(applicationDescriptor);
....................
gcmad.kill();</programlisting>

			<para>This terminates all the ProActive Runtimes that have been started by this Application.</para>

		</section>


		<section xml:id="KillingJVMs_XML"><info><title>Killing JVMs started with an XML Deployment</title></info>

			<para>If you have used the XML Deployment to deploy your active objects on several hosts, you can kill the deployed JVMs as well as theirs hosted active objects by calling
			the <emphasis role="italics">killall(boolean softly)</emphasis> method on the descriptor object.</para>

			<programlisting language="java">//----------- Returns a ProActiveDescriptor object from the xml file
ProActiveDescriptor pad = PADeployment.getProactiveDescriptor(String xmlFileLocation);
pad.activateMappings();

...

//----------- Kills every jvms deployed with the descriptor
pad.killall(false);</programlisting>

			<para>If <emphasis role="bold">softly</emphasis> is set to false, then all JVMs
			created when activating the descriptor are killed abruptly. If true, then the JVM
			that has originated the creation of a rmi registry waits until registry is
			empty before dying. To be more precise a thread is created to ask
			periodically the registry if objects are still registered.</para>
		</section>
    </section>
</chapter>
