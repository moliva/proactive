<?xml version="1.0" encoding="utf-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	xml:id="MessageRouting">
	<info>
		<title xml:id="pamr_chapter_title">ProActive Message Routing</title>
	</info>


	<section xml:id="pamr_overview">
		<info>
			<title>Overview of ProActive Message Routing</title>
		</info>

		<para>
			ProActive Programming supports several communication protocols like RMI, HTTP, Ibis or RMI over SSH.
			Each protocol has its own advantages and drawbacks. For example RMI is reasonably fast
			but is not firewall friendly. HTTP is slower but only requires one open TCP port.
		</para>

		<para>
			All the aforementioned protocols expect bidirectional TCP connections. The ProActive message routing
			protocol is designed to allow ProActive Programming deployment when only outgoing connections
			are available. Such environments can be encountered due to:

			<itemizedlist>
				<listitem>
					<para>Network address translation devices </para>
				</listitem>
				<listitem>
					<para>Firewalls allowing only outgoing connection (this is the default setup of many personal firewall)</para>
				</listitem>
				<listitem>
					<para>Virtual Machines with a virtualized network stack</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			When the message routing protocol is activated, each ProActive runtime connect to a
			central message router. This connection is kept open, and used as a tunnel
			to distribute incoming messages to their recipients. If the tunnel goes down, it is
			automatically reopened by the ProActive runtime.
		</para>

		<para>
			Few use cases of the ProActive message routing protocol follows.
		</para>

		<para>
			The first use case is two laptops connected by WIFI, each of them using a personal
			firewall. As shown on the
			<link linkend="pamr_usecase_laptop">picture</link> hereafter, there is no way to establish a connection
			between these two laptops. To solve this issue, a message router can be deployed on an external
			machine. Most of the desktop machines and laptop have a personal firewall enabled. If it is
			possible, it is better to open on TCP port on each machine and use the HTTP transport. If not,
			then message routing can be used.

			<mediaobject xml:id="pamr_usecase_laptop">
				<imageobject>
					<imagedata format="PNG" width="80%" align="center" fileref="images/png/laptop_nok.png" scalefit="1" />
				</imageobject>
				<caption>
					<para>
						Laptops with personal firewalls denying incoming connection.
					</para>
				</caption>
			</mediaobject>
		</para>

		<para>
			The second use case is similar to the first one. When a virtual machine is deployed with a virtual
			network stack, it is not possible to contact the virtual machines from the LAN. VMs are behind
			a software NAT performed by the hypervisor.

			<mediaobject xml:id="pamr_usecase_virtualization">
				<imageobject>
					<imagedata format="PNG" width="80%" align="center" fileref="images/png/virtualization_nok.png"/>
				</imageobject>
				<caption>
					<para>
						Servers with few virtual machines deployed with a virtualized network stack.
					</para>
				</caption>
			</mediaobject>

			The solution is to place a message router on a physical machine on the LAN. All the virtual machines will
			connect to this router. For production usage, it is better to configure your VM to get real IP addresses
			on the LAN. But with message routing you can develop and test your application on virtual machines
			without any configuration.
		</para>

		</section>

	<section xml:id="pamr_configuration">
		<info>
			<title>ProActive message routing configuration</title>
		</info>

		<para>
			The configuration of the ProActive message routing protocol is a two step process.
			The first step is to configure and start the message router. Then, the second one
			is to configure every ProActive runtime to use the ProActive message routing protocol
			and the started message router.
		</para>

		<section xml:id="pamr_configuration_router">
			<info>
				<title>Message router configuration</title>
			</info>

			<para>
				The message router has to be started on a machine which is TCP reachable by all the
				ProActive runtimes involved in the computation. The localization of the message
				router is critical: the machine has to be TCP reachable, have a good network connection
				(bandwidth and latency) and be stable. If the message router crashes, the whole application
				must be restarted.
			</para>

			<para>
				To start a message router, use the <emphasis role="bold">bin/startRouter.sh</emphasis> or
				<emphasis role="bold">bin/startRouter.bat</emphasis> script:

				<screen>
[cmathieu@britany:programming-git]$ bin/startRouter.sh
34980@britany.activeeon.com - [INFO    forwarding.router] Message router listening on ServerSocket[addr=/192.168.1.22,localport=33647]</screen>

				The IP address and TCP port on which the message router is bound is printed on the standard output.
			</para>

			<para>
				By default, the message router binds to the <emphasis>wildcard</emphasis> address on the
				<emphasis>33647</emphasis> TCP port. This behavior can be configuration by using the
				following parameters:

				<itemizedlist>
					<listitem>
						<para>
							<emphasis>--port</emphasis>: The TCP port to bind to.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--ip</emphasis>: The IP address to bind to.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--ipv4</emphasis>: The message router will only use IPv4 sockets
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--ipv6</emphasis>: Prefer IPv6 addresses over IPv4 addresses (and IPv4 addresses
							mapped over IPv6),
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--nbWorkers</emphasis>: The number of worker threads to use. The only serial
							operation in the message router is reading bits from the tunnels. All other operations
							can be performed in parallel with the help of a thread pool. This parameter defines how
							many workers are in the thread pool.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--configFile</emphasis>: The configuration file to use to declare reserved clients.
							This file is a Java property file. Keys must be integers between 0 and 4095, value must be Unicode
							strings shorter than 64 characters. If a invalid value is found, the router will not start.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>--timeout</emphasis>: PAMR uses an heartbeat mecanism to detect network failures. 
							As soon as an agent detects that the tunnel is broken, it will try to reconnect to the router. 
							If the router detects a broken tunnel it sends a notification to every clients to unlock blocked
							thread waiting for a response from the disconnected client. This option sets the heartbeat timeout
							in milliseconds. It means that if the router or a client does not receive an heartbeat before the 
							timeout, then the tunnel is closed and the client is disconnected. An heartbeat is sent every at an 
							timeout/3 frequency.
						</para>
						
						<para>
							This value should not be set to a too low value. Value lower than 600ms on a LAN are unreliable (lot 
							of false positive due to scheduling/network latency). 
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>


		<section xml:id="pamr_configuration_runtime">
			<info>
				<title>ProActive runtime configuration</title>
			</info>

			<para>
				Once the message router is running, ProActive runtime can be started. Three ProActive properties
				has to be set:

				<itemizedlist>
					<listitem>
						<para>
							<emphasis>proactive.communication.protocol</emphasis>: set to <emphasis>pamr</emphasis>
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>proactive.net.router.address</emphasis>: set to the router IP address
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>proactive.net.router.port</emphasis>: (optionally) set to the TCP port on which the
							message router is listening. If omitted, port <emphasis>33647</emphasis> is used.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>proactive.communication.pamr.agent.id</emphasis>: (optionally) This property
							can be set to obtain a fixed PAMR agent id from the router. It allows to have well known
							URL with PAMR. The agent ID must be declared in the router configuration file with a magic
							cookie.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>proactive.communication.pamr.agent.magic_cookie</emphasis>: (optionally) When
							using a fixed PAMR agent id, the agent must provide a magic cookie to register. This
							cookie must be the same than the one declared in the router configuration file.
						</para>
					</listitem>

				</itemizedlist>
			</para>

			<para>
				If the router cannot be contacted, an error message is printed with an exception like this one:

				<screen>
<![CDATA[
6743@britany.activeeon.com - [INFO oactive.remoteobject] Loading <pamr, class org.objectweb.proactive.extra.messagerouting.remoteobject.MessageRoutingRemoteObjectFactory>
6743@britany.activeeon.com - [FATAL warding.remoteobject] Failed to initializeorg.objectweb.proactive.extra.messagerouting.remoteobject.MessageRoutingRemoteObjectFactory
org.objectweb.proactive.core.ProActiveRuntimeException: Failed to create the local agent
	at org.objectweb.proactive.extra.messagerouting.remoteobject.MessageRoutingRemoteObjectFactory.logAndThrowException(MessageRoutingRemoteObjectFactory.java:119)
	at org.objectweb.proactive.extra.messagerouting.remoteobject.MessageRoutingRemoteObjectFactory.<init>(MessageRoutingRemoteObjectFactory.java:101)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at java.lang.Class.newInstance0(Class.java:355)
	at java.lang.Class.newInstance(Class.java:308)
	at org.objectweb.proactive.core.remoteobject.AbstractRemoteObjectFactory.getRemoteObjectFactory(AbstractRemoteObjectFactory.java:100)
	at org.objectweb.proactive.core.remoteobject.AbstractRemoteObjectFactory.getDefaultRemoteObjectFactory(AbstractRemoteObjectFactory.java:126)
	at org.objectweb.proactive.core.remoteobject.RemoteObjectExposer.createRemoteObject(RemoteObjectExposer.java:153)
	at org.objectweb.proactive.core.runtime.ProActiveRuntimeImpl.<init>(ProActiveRuntimeImpl.java:267)
	at org.objectweb.proactive.core.runtime.ProActiveRuntimeImpl.<clinit>(ProActiveRuntimeImpl.java:158)
	at org.objectweb.proactive.extensions.gcmdeployment.GCMApplication.NodeMapper.subscribeJMXRuntimeEvent(NodeMapper.java:102)
	at org.objectweb.proactive.extensions.gcmdeployment.GCMApplication.NodeMapper.<init>(NodeMapper.java:97)
	at org.objectweb.proactive.extensions.gcmdeployment.GCMApplication.GCMApplicationImpl.<init>(GCMApplicationImpl.java:176)
	at org.objectweb.proactive.extensions.gcmdeployment.PAGCMDeployment.loadApplicationDescriptor(PAGCMDeployment.java:104)
	at org.objectweb.proactive.extensions.gcmdeployment.PAGCMDeployment.loadApplicationDescriptor(PAGCMDeployment.java:86)
	at org.objectweb.proactive.examples.hello.Hello.main(Hello.java:87)
Caused by: org.objectweb.proactive.core.ProActiveException: Failed to create the tunnel to britany.activeeon.com/192.168.1.22:33647
	at org.objectweb.proactive.extra.messagerouting.client.AgentImpl.<init>(AgentImpl.java:128)
	at org.objectweb.proactive.extra.messagerouting.client.AgentImpl.<init>(AgentImpl.java:88)
	at org.objectweb.proactive.extra.messagerouting.remoteobject.MessageRoutingRemoteObjectFactory.<init>(MessageRoutingRemoteObjectFactory.java:99)
	... 17 more
]]></screen>

			The nested exception shows that the ProActive runtime failed to contact the message router.
			</para>
		</section>

		<section xml:id="pamr_well_know_urls">
			<info>
				<title>Well known urls with PAMR</title>
			</info>

			<para>
				By default the router assigns an unique and random Agent ID to each agent. This random ID in
				the URL can make PAMR quite hard to use to deploy daemons and services. Indeed each time the
				services is restarted, a new URL is created.
			</para>

			<para>
				To address this issue, PAMR provides reserved agent ID. This feature allows a runtime to ask for
				a specific agent ID. If an agent is already connected then it is disconnected and the slot is
				given to the new agent. Reserved agent ID must be declared in the router configuration file and
				a magic cookie must be specified for each reserved agent ID. This cookie is used to secure the slot,
				a client must provide the right magic cookie to be allowed to use the slot.
			</para>

			<para>
				All reserved agent ID must be declared in a configuration file, and the router must be started
				with the <emphasis role="bold">--configFile</emphasis> option. The configuration file is a standard
				Java property file. Keys must be an integer between 0 and 4095 (the agent ID) and values are Unicode
				strings up to 64 characters.
			</para>
			
			<para>
				A magic cookie for the key <emphasis role="bold">configuration</emphasis> must be set. It allows the administrator
				to reload the router configuration at runtime. See the <emphasis role="bold">--reload</emphasis> option.
			</para>

				<screen>
<![CDATA[
$ cat services.txt
# Admin cookie
configuration=mySecretPassword
# Application 1
0=magicCookie1
# Application 2
2000=toor
2001=admin

$ ./bin/startRouter.sh --configFile services.txt
]]></screen>

			<para>
				The <emphasis role="bold">proactive.communication.pamr.agent.id</emphasis> and
				<emphasis role="bold">proactive.communication.pamr.agent.magic_cookie</emphasis>
				ProActive properties must be used on the client runtime to configure the PAMR agent.
			</para>

		</section>
	</section>
</chapter>
