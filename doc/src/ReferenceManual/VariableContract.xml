<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="VariableContract"><info><title xml:id="VariableContractsforDescriptors_72">Variable Contracts for Descriptors</title></info>


  <section xml:id="VariableContractsforDescriptors_720"><info><title>Variable Contracts for Descriptors</title></info>


    <section xml:id="Principle_72"><info><title>Principle</title></info>


      <para>The objective of this feature is to allow the use of variables
      into GCM descriptors and XML descriptors. Variables can be defined directly in the
      descriptor, using independent files, or inside the deploying
      application's code (with an API).</para>

      <para>The variable tags are useful inside a descriptor because they can
      factorize frequent parameters (for example, a variable like
      ${PROACTIVE_HOME} can be defined, set and used in a descriptor).
      But also, because they can be used to establish a contract between the
      program and the descriptor.</para>
    </section>

    <section xml:id="dbdoclet.id.VariableContract_html_variableTypes"><info><title xml:id="VariableTypes_72">Variable Types</title></info>

      <para>Variables can be set in more than one place. The following table describes where each variable type can be defined.
      When the value is set
      on multiple places, then the definition specified in the priority column
      will take precedence. In the priority column, items towards the left
      have more priority.</para>

      <table>

         <title xml:id="VariableTypes_172">Variable Types</title>
        <tgroup cols="4">
          <colspec align="center"/>

          <thead>
            <row>
              <entry align="center">Type</entry>

              <entry align="center">Ability to set value</entry>

              <entry align="center">Ability to set empty value</entry>

              <entry align="center">Priority</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><emphasis role="bold">descriptorVariable</emphasis></entry>

              <entry>Descriptor</entry>

              <entry>Program</entry>

              <entry>Descriptor</entry>
            </row>

            <row>
              <entry><emphasis role="bold">programVariable</emphasis></entry>

              <entry>Program</entry>

              <entry>Descriptor</entry>

              <entry>Program</entry>
            </row>

            <row>
              <entry><emphasis role="bold">descriptorDefaultVariable</emphasis></entry>

              <entry>Descriptor, Program</entry>

              <entry>-</entry>

              <entry>Program</entry>
            </row>

            <row>
              <entry><emphasis role="bold">programDefaultVariable</emphasis></entry>

              <entry>Program, Descriptor</entry>

              <entry>-</entry>

              <entry>Descriptor</entry>
            </row>

            <row>
              <entry><emphasis role="bold">javaPropertyVariable</emphasis></entry>

              <entry>Descriptor, Program</entry>

              <entry>-</entry>

              <entry>JavaProperty</entry>
            </row>

            <row>
              <entry><emphasis role="bold">javaPropertyDescriptorDefault</emphasis></entry>

              <entry>JavaProperty, Descriptor, Program</entry>

              <entry>Program</entry>

              <entry>JavaProperty, Descriptor, Program</entry>
            </row>

            <row>
              <entry><emphasis role="bold">javaPropertyProgramDefault</emphasis></entry>

              <entry>JavaProperty, Descriptor, Program</entry>

              <entry>Descriptor</entry>

              <entry>JavaProperty, Program, Descriptor</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

    </section>

    <section xml:id="dbdoclet.id.VariableContract_html_variableTypesDesc"><info><title xml:id="VariableTypesUserGuide_72">Variable Types User Guide</title></info>


      <para>In order to help to identify the user cases where the variable types might be
      useful, we have defined the concept of programmer and deployer. The
      programmer is the person writing the application code whereas the deployer
      corresponds to the responsible of writing the deployment descriptor. The
      variables represent rights and responsibilities between the two parties
      (contract) as specified in the following table:</para>

      <table>
          <title>Variable behaviors and use cases</title>
          <tgroup cols="3">
            <tbody>
              <row>
                <entry><para> <emphasis role="bold">Type</emphasis>
                </para></entry>

                <entry><para> <emphasis role="bold">Behavior</emphasis>
                </para></entry>

                <entry><para> <emphasis role="bold">When to use this
                type</emphasis> </para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">descriptorVariable</emphasis> </para></entry>

                <entry><para>The value has to be set in the descriptor, and
                cannot be specified in the program.</para></entry>

                <entry><para>The deployer wants to use a value, without
                giving the possibility to the programmer to modify it. The
                programmer can define this variable to empty, to force the
                descriptor to set a value.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">programVariable</emphasis>
                </para></entry>

                <entry><para>The value has to be set in the program, and cannot
                be specified in the descriptor.</para></entry>

                <entry><para>The programmer wants to use a value, without
                giving the possibility to the descriptor to modify it. The
                descriptor can define this variable to empty, to force the
                programmer to set a value.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">descriptorDefaultVariable</emphasis>
                </para></entry>

                <entry><para>A default value has to be specified in the
                descriptor. The programmer has the ability to change the
                value in the program. If the value is changed in
                the program, then this new value will have precedence over the
                one defined in the descriptor.</para></entry>

                <entry><para>The programmer may override the default value, but
				the responsibility of setting a default belongs to the
                deployer. </para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">programDefaultVariable</emphasis> </para></entry>

                <entry><para>A default value has to be specified in the program.
                The descriptor has the ability to change the value.
                If the value is changed in the descriptor, then
                this new value will have precedence over the one defined in
                the program.</para></entry>

                <entry><para>The deployer may override the default value,
                but the responsibility of setting a default belongs to the
                programmer.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">javaPropertyVariable</emphasis> </para></entry>

                <entry><para>Takes the value from the corresponding Java
                property.</para></entry>

                <entry><para>When a variable will only be known at runtime
                through the Java properties, and no default has to be provided
                by the descriptor or the application.</para></entry>
              </row>

              <row>
                <entry><emphasis role="bold">javaPropertyDescriptorDefault</emphasis></entry>

                <entry>Takes the value from the corresponding java property. A
                default value can also be set from the descriptor or the
                program. If no property is found, the descriptor default value
                will override the program default value.</entry>

                <entry>When the descriptor sets a default value, that can be
                overridden at deployment using a java property.</entry>
              </row>

              <row>
                <entry><emphasis role="bold">javaPropertyProgramDefault</emphasis></entry>

                <entry>Takes the value from the corresponding java property. A
                default value can also be set from the program or the
                descriptor. If no property is found, the program default value
                will override the program default value</entry>

                <entry>When the program sets a default value, than can be
                overridden at deployment using a java property.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
    </section>

    <section xml:id="VariablesExample_72"><info><title>Variables Example</title></info>


      <section xml:id="DescriptorVariables_72"><info><title>Descriptor Variables</title></info>


        <indexterm><primary>Descriptor Variables</primary></indexterm>

        <para>The following example shows how to define and use a variable into a GCM descriptor. All variables has to be set in an environment section.</para>

         <programlisting language="xml"><textobject><textdata fileref="automatic_snippets/VariableContract_1.snip"/></textobject></programlisting>


        <para>As for the XML descriptor version, all variables has to be set in a variable section at the beginning
        of the descriptor file in the following way:</para>

   <programlisting language="xml">&lt;variables&gt;
   &lt;descriptorVariable name="PROACTIVE_HOME" value="ProActive/dist/ProActive"/&gt;
   &lt;descriptorDefaultVariable name="NUMBER_OF_VIRTUAL_NODES" value="20"/&gt;
   &lt;programVariable name="VIRTUAL_NODE_NAME"/&gt;
   &lt;javaPropertyVariable name="java.home"/&gt;
   &lt;javaPropertyDescriptorDefault name="host.name" value="localhost"/&gt;
   &lt;javaPropertyProgramDefault name="priority.queue"/&gt;

   &lt;!-- Include external variables from files--&gt;
   &lt;includeXMLFile location="file.xml"/&gt;
   &lt;includePropertyFile location="file.properties"/&gt;
&lt;/variables&gt;
         ...
&lt;!-- Usage example--&gt;
&lt;classpath&gt;
   &lt;absolutePath value="${USER_HOME}/${PROACTIVE_HOME}/ProActive.jar"/&gt;
   ...
&lt;/classpath&gt;
...</programlisting>
      </section>

      <section xml:id="ProgramVariables_72"><info><title>Program Variables</title></info>
        <para>Variables can easily be defined into the Java program in the following way:</para>

         <programlisting language="java"><textobject><textdata fileref="automatic_snippets/VariableContract_2.snip"/></textobject></programlisting>

        <para>In you are using the previous deployment, you should proceed as follows:</para>

        <programlisting language="java">XML_LOCATION="/home/user/descriptor.xml";
VariableContract variableContract= new VariableContractImpl();
variableContract.setVariableFromProgram( "VIRTUAL_NODE_NAME", "testnode", VariableContractType.ProgramVariable);
variableContract.setVariableFromProgram( "NUMBER_OF_VIRTUAL_NODES", "10", VariableContractType.DescriptorDefaultVariable);
variableContract.setVariableFromProgram( "priority.queue", "vip", VariableContractType.JavaPropertyProgramDefault);
ProActiveDescriptor pad = PADeployment.getProactiveDescriptor(XML_LOCATION, variableContract);

//Usage example
VariableContract vc=pad.getVariableContract;
String proActiveHome=vc.getValue("PROACTIVE_HOME");</programlisting>
      </section>
    </section>

    <section xml:id="ExternalVariableDefinitionsFiles_72"><info><title>External Variable Definitions Files</title></info>

      <para>
         Instead of declaring variables into your program or into your descriptor, it is also possible to define them into an external file
         and to make reference to it in your description. This can be very useful if you want the same variables for several descriptors.
      </para>

      <section xml:id="PropertiesFiles_72"><info><title>Properties Files</title></info>


        <para>This approach uses <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Properties.html#load(java.io.InputStream)">Sun
        microsystems properties file format</link>. The format is plain text
        with one definition per line in the format <emphasis role="bold">variable = value</emphasis>, as shown in the following
        example:</para>

        <screen># Definition of the specific context
USER_HOME = /usr/home/team
PROACTIVE_HOME = ProActive/dist/ProActive
NUM_NODES: 45</screen>

        <para>Variables defined in this format will be declared as <emphasis role="bold">DescriptorVariable</emphasis> type. Note that colon (:)
        can be used instead of equal (=).</para>
      </section>

      <section xml:id="XMLFiles_72"><info><title>XML Files</title></info>


        <para>In the previous deployment version, it was also possible to define variables into an XML file. It has been removed for the GCM deployment
        thinking it was useless.</para>

         <programlisting language="xml">&lt;!-- Definition of the specific context --&gt;
&lt;variables&gt;
  &lt;descriptorVariable name="USER_HOME" value="/usr/home/team"/&gt;
  &lt;descriptorVariable name="PROACTIVE_HOME" value="ProActive/dist/ProActive"/&gt;
  &lt;descriptorVariable name="NUM_NODES" value="45"/&gt;
&lt;/variables&gt;</programlisting>
      </section>

    </section>

    <section xml:id="ProgramVariableAPI_72"><info><title>Program Variable API</title></info>


      <section xml:id="Relevantimportpackages_72"><info><title>Relevant import packages</title></info>

         <programlisting language="java"><textobject><textdata fileref="automatic_snippets/VariableContract_import.snip"/></textobject></programlisting>

      </section>

      <section xml:id="AvailableVariableTypes_72"><info><title>Available Variable Types</title></info>


        <itemizedlist>
          <listitem>
            <para>VariableContractType.<emphasis role="bold">DefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">DescriptorDefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">ProgramVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">ProgramDefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">JavaPropertyVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">JavaPropertyDescriptorDefault</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis role="bold">JavaPropertyProgramDefault</emphasis></para>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="API_72"><info><title>API</title></info>


        <para>The API for setting variables from the Program is shown below.
        The <emphasis role="bold">name</emphasis> corresponds to the variable
        name, and the <emphasis role="bold">value</emphasis> to the variable
        content. The <emphasis role="bold">type</emphasis> corresponds to a
        VariableContractType.</para>

        <screen>public void VariableContract.setVariableFromProgram( String <emphasis role="bold">name</emphasis>, String <emphasis role="bold">value</emphasis>, VariableContractType <emphasis role="bold">type</emphasis>);
public void VariableContract.setVariableFromProgram( HashMap <emphasis role="bold">map</emphasis>, VariableContractType <emphasis role="bold">type</emphasis>);
</screen>

        <para>The API for adding a multiple variables is shown above. The
        variable <emphasis role="bold">name</emphasis>/<emphasis role="bold">value</emphasis> pair is specified as the key/content of
        the HashMap.</para>
      </section>
    </section>
  </section>
</chapter>
