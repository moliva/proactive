<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="FileTransfer"><info><title xml:id="ProActiveFileTransfer_67">ProActive File Transfer</title></info>


  <section xml:id="FileTransfer_html_intro"><info><title xml:id="IntroductionandConcepts_67">Introduction and Concepts</title></info>


    <para>ProActive provides a way to transfer files or directories from on node to another.
	There are two kind transfers:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Push</emphasis> - Transfer from the local node to a remote node.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Pull</emphasis> - Transfer from a remote node to the local node.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Third part transfer</emphasis> - Transfer from a remote node to another remote node.</para>
      </listitem>
    </itemizedlist>

    <para>The transfer can take place at any of the following moments:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Deployment</emphasis> Time: At the
        beginning of the application to input the data.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Retrieval</emphasis> Time: At the end of
        the application to collect results.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">During the user application</emphasis>: To
        transfer information between nodes.</para>
      </listitem>
    </itemizedlist>

	<warning>
		<para>
			If you use the GCM Deployment, the transfer can only be made by the user at the third moment.
			Contrary to the XML Deployment which provides tags for transferring file at deployment and retrieval times,
			GCM Deployment is not able to do that. If you want to know how to transfer files at deployment and retrieval times,
			please refer to <xref linkend="DescriptorFileTransfer_67" />.
		</para>
	</warning>

  </section>

  <section xml:id="dbdoclet.id.FileTransfer_html_objectives"><info><title xml:id="FileTransferAPI_67">File Transfer API</title></info>


    <section xml:id="APIDefinition_67"><info><title>API Definition</title></info>


	  <para>ProActive File Transfer is done through the <literal>org.objectweb.proactive.api.PAFileTransfer</literal> class which implements the following methods:</para>
      <programlisting language="java">public static RemoteFile pull(Node srcNode, File srcFile, File dstFile) throws IOException;
public static List&lt;RemoteFile&gt; pull(Node srcNode, File[] srcFile, File[] dstFile) throws IOException;

public static RemoteFile push(File srcFile, Node dstNode, File dstFile) throws IOException;
public static List&lt;RemoteFile&gt; push(File[] srcFile, Node dstNode, File[] dstFile) throws IOException;

public static RemoteFile transfer(Node srcNode, File srcFile, Node dstNode, File dstFile);
public static List&lt;RemoteFile&gt; transfer(Node srcNode, File[] srcFile, Node dstNode, File[] dstFile);
public static List&lt;RemoteFile&gt; transfer(Node srcNode, File[] srcFile, Node dstNode, File[] dstFile, int bsize, int numFlyingBlocks) throws IOException;

public static RemoteFile mkdirs(Node node, File path) throws IOException;</programlisting>


      <para>These methods handle the transfer of file between
      ProActive <emphasis role="bold">Nodes</emphasis>. The <emphasis role="bold">pull</emphasis> methods retrieve a file/directory located on
      a remote machine to the local machine. The <emphasis role="bold">push</emphasis> methods transfer a file/directory available
      on the local node to the specified remote node. The <emphasis role="bold">transfer</emphasis> methods allow to transfer between third
      part nodes. The mkdirs method creates a directory on the remote
      machine.</para>

      <para>The file transfers are performed in an asynchronous fashion. Each
      of these methods returns a <emphasis role="bold">RemoteFile</emphasis>
      object which represents the file transfer operation and the remote
      file's location. When these methods are invoked a <emphasis role="bold">RemoteFile</emphasis> instance is immediately returned,
      before the file transfer operation has been completed. The <emphasis role="bold">RemoteFile</emphasis> object provides a way to monitor the
      status of the file transfer:</para>


	  <programlisting language="java"><textobject><textdata fileref="automatic_snippets/RemoteFile.snip"/></textobject></programlisting>

      <para>The <emphasis role="bold">isFinished</emphasis> and <emphasis role="bold">waitFor</emphasis> can be invoked to query and wait on the
      file transfer status. The <emphasis role="bold">pull</emphasis> method
      can be used to fetch the <emphasis role="bold">RemoteFile</emphasis>
      from the remote node, into the local <emphasis role="bold">Node</emphasis>, and the <emphasis role="bold">push</emphasis> methods can be used to send the <emphasis role="bold">RemoteFile</emphasis> to another <emphasis role="bold">Node</emphasis>.</para>
    </section>

    <section xml:id="HowtousetheAPIExample_67"><info><title>How to use the API Example</title></info>

	  <para>
		The following class shows how to use the ProActive File transfer whether it be with the GCM or the XML deployments.
		Actually, once the nodes concerned by the transfer have been retrieved, there is no difference between these two deployment.
		The only difference is how to get a node.
	  </para>
	  <programlisting language="java"><textobject><textdata fileref="automatic_snippets/FileTransferTest.snip"/></textobject></programlisting>

	  <para>This example uses a third part transfer but, given this example, using a push or pull transfer is really straight forward.</para>

      <tip>
		<title>How to obtain a local Node</title>


        <para>A local node be easyly obtained by using the <literal>NodeFactory</literal>:</para>

		<programlisting language="java">Node srcNode = NodeFactory.getDefaultNode();</programlisting>
      </tip>

      <tip>
		<title>How to obtain a Node from an Active Object reference</title>


        <para>The Node where an Active Object resides can be obtained as follows:</para>

		<programlisting language="java">Object o  =  PAActiveObject.newActive(...);
...
Node node = PAActiveObject.getActiveObjectNode(o);
		</programlisting>
      </tip>
    </section>
    <section xml:id="HowFileTransferAPIWorks_67"><info><title>How File Transfer API works</title></info>


      <para>The File Transfer API is built on top of ProActive active object
      and future file asynchronism model. When pulling or pushing a file from
      a Node, two service Active Objects (AO) are created. One is placed on
      the local machine and the other one on the remote site. The file is then
      split into blocks, and transferred over the network using remote
      invocations between these two AOs.</para>


	  <figure xml:id="FileTransferRepresentation_42"><info><title>File Transfer Representation</title></info>

		<mediaobject>
		  <imageobject>
			<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/filetransfer.png" format="PNG"/>
		  </imageobject>
		</mediaobject>
	  </figure>

	  <para>Each ProActive runtime has a unique <literal>FileTransferEngine</literal> which manages several <literal>FileTransferService</literal>.
	  These services are active object and are in charge of transferring files. When a transfer is launch, the unique <literal>FileTransferEngine</literal> asks one of its
	  <literal>FileTransferService</literal> to send the file to another <literal>FileTransferService</literal> which is a <literal>FileTransferService</literal> of the destination node.
	  The source <literal>FileTransferService</literal> then splits the file into blocks and calls the <literal>saveFileBlock</literal> method on the destination <literal>FileTransferService</literal>
	  to write each block in the destination node.
	  </para>

    </section>
  </section>

</chapter>
