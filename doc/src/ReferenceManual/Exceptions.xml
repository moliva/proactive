<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Exceptions"><info><title xml:id="ExceptionHandling_70">Exception Handling</title></info>


  <indexterm><primary>Exceptions</primary></indexterm>

  <section xml:id="ExceptionsandAsynchrony_70"><info><title>Exceptions and Asynchrony</title></info>


    <para>In the asynchronous environment provided by ProActive, exceptions
    cannot be handled in the same manner as in a sequential environment. Let's see the
    problem with exceptions and asynchrony in a piece of code.
    The following method is a simple method on class <literal>A</literal> that throws an exception according to the boolean
    parameter.</para>

    <programlisting language="java"><textobject><textdata fileref="automatic_snippets/class_A_exception.snip"/></textobject></programlisting>
    <para>
      As you can see, we have inserted a waiting time. This is done in order to examine the asynchronous/synchronous behaviour.
      With a common exception handling, we would proceed as follows:
    </para>
    <programlisting language="java"><textobject><textdata fileref="automatic_snippets/basic_exception.snip"/></textobject></programlisting>

    <para>As the method call in line 2 is asynchronous, the program continues its execution
    without waiting for its completion. So, it is
    possible for the control flow to exit the <literal>try</literal>.
    In that case, if the method call finishes with an exception, we cannot
    throw it back in the code anymore because we are no more in the <literal>
    try</literal> block. That is why ProActive method
    calls with potential exceptions are handled synchronously by default.
    If you try this example, you will not see the <literal>Hello</literal> display which
    shows that the method was synchronous and thus, the exception has been catch immediately.
    </para>

<section xml:id="Barriersaroundtryblocks"><info><title>Barriers around <literal>try</literal>
      blocks</title></info>


      <para>The ProActive solution to this problem is to put barriers around
      <literal>try/catch</literal> blocks. This way the control flow cannot
      exit the block, the exception can be handled in the appropriate
      <literal>catch</literal> block, and the call is
      asynchronous within the block.</para>

      <para>With this configuration, the potential exception can be thrown at
      several points:</para>

      <itemizedlist>
        <listitem>
          <para>when accessing a future</para>
        </listitem>

        <listitem>
          <para>inside the barrier</para>
        </listitem>

        <listitem>
          <para>by using the provided API (see after)</para>
        </listitem>
      </itemizedlist>

      <para>Let's reuse the previous example to see how to use these
      barriers:</para>

      <programlisting language="java"><textobject><textdata fileref="automatic_snippets/tryWithCatch_exception.snip"/></textobject></programlisting>

      <para>With this code, the method call will be asynchronous, and the
      exception will be handled in the correct <literal>
      catch</literal> block. Even if this implies waiting at the
      end of the <literal>try</literal> block for the completion
      of the call. If you try this piece of code, you will see that,
      contrary to the previous example, <literal>Hello</literal> will
      appear and then you will see the caught exception.</para>

      <para>Let's see in detail the needed modifications to the code:</para>

      <itemizedlist>
        <listitem>
          <para><literal>PAException.tryWithCatch()</literal> - right before the <literal>
          try</literal> block. The parameter is either the caught
          exception class or an array of exception classes if there are
          several one.</para>
        </listitem>

        <listitem>
          <para><literal>PAException.endTryWithCatch()</literal> - at the end of the <literal>try</literal> block.</para>
        </listitem>

        <listitem>
          <para><literal>PAException.removeTryWithCatch()</literal> - at the beginning of the
          <literal>finally</literal> block, so the block becomes
          mandatory.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="TryWithCatchAnnotator_70"><info><title>TryWithCatch Annotator</title></info>


      <para>These needed annotations can be seen as cumbersome, so we provide
      a tool to add them automatically to a given source file. It transforms
      the first example code into the second one. Here is a sample session with the
      tool:</para>

      <screen><textobject><textdata fileref="code_snippets/trywithcatch_annotator_session.txt"/></textobject></screen>

      <para>As we can see, ProActive method calls are added to make sure all
      calls within <literal>try/catch</literal> blocks are handled asynchronously. The tool can be
      found in <literal>ProActive/bin/</literal> and is named <literal>trywithcatch.[sh|bat]</literal>. The default behaviour of <literal>trywithcatch.[sh|bat]</literal> is to
      add only <literal>PAException...</literal> without importing the PAException's package. If you do not want to bother with this
      manual importation, launch this script with the <literal>-fullname</literal> option. That will write the full name of PAException,
      that is to say, <literal>org.objectweb.proactive.api.PAException</literal>.</para>

    </section>

    <section xml:id="literalthrowArrivedExceptionliteralandliteralwaitForPotentialExceptionliteral_70"><info><title><literal>throwArrivedException()</literal> and <literal>waitForPotentialException()</literal></title></info>


      <para>We have seen the 3 methods mandatory to perform asynchronous calls
      with exceptions. However the complete API includes two more calls. So far
      the blocks boundaries define the barriers. But, some control over the
      barrier is provided thanks to two additional methods.</para>

      <para>The first method is <literal>PAException.throwArrivedException()</literal>. During a
      computation an exception may be raised but there is no point from where
      the exception can be thrown (a future or a barrier). The solution is to
      call the <literal>PAException.throwArrivedException()</literal> method which simply queries
      ProActive to see if an exception has arrived with no opportunity of
      being thrown back in the user code. In this case, the exception is
      thrown by this method.</para>

      <programlisting language="java"><textobject><textdata fileref="automatic_snippets/tryWithCatch_throwArrivedException.snip"/></textobject></programlisting>

      <para>If you run the previous, you will see that the method behaviour is dependent on the timing since the first call does not throw
      exception whereas the second one throws one. Thus,
      calling this method may or may not result in an exception being thrown,
      depending on the time for an exception to come back. That is why another
      method is provided: <literal>PAException.waitForPotentialException()</literal>.
      Unlike the previous <literal>PAException.throwArrivedException()</literal>,
       this method is blocking. After calling this
      method, either an exception is thrown or it is assured that all
      previous calls in the block completed successfully, so no exception can
      be thrown from the previous calls.</para>

      <programlisting language="java"><textobject><textdata fileref="automatic_snippets/tryWithCatch_waitForPotentialException.snip"/></textobject></programlisting>
    </section>
  </section>
</chapter>
