<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Principles">

<info><title xml:id="ProActiveOverview_20">ProActive Overview</title></info>

  <para>Grid computing is now a key aspect, from scientific to business
  applications, from large scale simulations to everyday life enterprise IT.
  After the old days of mainframes and servers with hundreds of persons
  sharing the same machines or the quite current days of the PCs with one
  person for one computer, we are just entering the era of Ubiquitous
  Computing with many computers at hand for every single individual.
  </para>

	<para>
		Grids gather large amounts of heterogeneous resources across geographically distributed
		sites so as to be used by virtual organizations. Resources are usually organized in groups of
		desktop machines and/or clusters, which are managed by different administrative domains
		(labs, universities, companies, etc.). The large amounts of heterogeneous resources complicate the deployment task in terms of
		configuration and connection to remote resources. Targeted deployment sites may be specified
		beforehand, or automatically discovered at runtime. Each domain may have its own management and
		security policies. Grid applications aim at using a large number of resources, which are geographically
		distributed. Hence, Grid frameworks have to help applications with scalability issues, such as providing
		parallelism capabilities for a large number of resources.
	</para>
	<para>
		The large number of resources distributed
		on different domains implies a high probability of faults, such as hardware failures, network downtime,
		or maintenance. Since a grid gathers geographically dispersed and administratively independent computational sites into a large federated
		computing system with common interfaces, new programming models have to be defined to abstract away these complexities
		from programmers.
	</para>

   <section xml:id="ProActiveProgrammingFrameworks_20"><info><title>ProActive Programming Frameworks</title></info>

		<section xml:id="Introduction_20"><info><title>Introduction</title></info>

			<!--//TODO -->
			<para/>

	<para>

	ProActive is an open source Java library aiming to simplify the programming of
	 multithreaded, parallel, and distributed
	applications for Grids, multi-cores, clusters, and data-centers. It allows concurrent and parallel
	programming and offers distributed and asynchronous communications, mobility, and a deployment framework.
	With a small set of primitives, ProActive provides an API allowing the development of parallel
	applications, which may be deployed on distributed systems and on Grids. ProActive does not
	require any modifications to Java or to the Java Virtual Machine (JVM), therefore allowing the deployment
	of applications using the ProActive API on any operating system that provides a compatible JVM.
	</para>


		<para>Overall, ProActive promotes a few basic and simple principles:</para>
		<itemizedlist>
			<listitem>
				<para> Activities are distributed, remotely accessible objects</para>
			</listitem>

			<listitem>
				<para>Interactions are done through asynchronous method calls</para>
			</listitem>

			<listitem>
				<para>Results of interactions are called futures and are first class
				entities.</para>
			</listitem>

			<listitem>
				<para>Callers can wait for results using a mechanism called
				wait-by-necessity</para>
			</listitem>
		</itemizedlist>

		<figure xml:id="ProActiveFeatures_20"><info><title>ProActive Features</title></info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/ProActive_Programming.png" format="PNG"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<xref linkend="ProActiveFeatures_20" /> exposes the main ProActive features:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">Master-Worker</emphasis> - The main goal of the ProActive Master-Worker API is to provide an easy to use framework for parallelizing embarrassingly parallel applications.
					You can find its documentation in <link xlink:href="../../ReferenceManual/multiple_html/MasterWorker.html" >"Chapter 6. Master-Worker API"</link> of the Reference Manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Monte Carlo</emphasis> - The goal of the ProActive Monte-Carlo API is to provide an easy to use API for running Monte-Carlo simulations in a distributed environment.
					You can find its documentation in <link xlink:href="../../AdvancedFeatures/multiple_html/MonteCarlo.html">"Chapter 14. Monte-Carlo API"</link> of the Advanced Features manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Legacy Wrapping</emphasis> - The Message Passing Interface (MPI) is a widely adopted communication library for parallel and distributed computing. This API helps you to deploy, wrap and couple MPI applications for distributed environments.
					You can find its documentation in <link xlink:href="../../ReferenceManual/multiple_html/WrappingMpiAndLegacyCode.html">"Chapter 9. Wrapping Native MPI Application"</link> of the Reference Manual.

				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">SPMD</emphasis> - SPMD stands for Single Program Multiple Data, which is a technique used to parallelize applications by separating tasks and running them simultaneously on different machines or processors.
					ProActive allows the use of object oriented programming combined with the SPMD techniques. You can find its documentation in <link xlink:href="../../ReferenceManual/multiple_html/OOSPMD.html">"Chapter 8. OOSPMD"</link> of the Reference Manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Taskflow</emphasis> - ProActive allows to programmatically create a taskflow using the TaskFlow API for submitted it to the ProActive Scheduler.
					You can find some information on this API in "Chapter 2. User guide" of the Scheduler Manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">File Split &amp; Merge</emphasis> - The "Files Split Merge" generic framework provides an easy way to develop a distribution layer for a native application in order to run it on a ProActive managed infrastructure through the ProActive Scheduler and Resource Manager.
					You can find its documentation in "Chapter 9. ProActive Scheduler's Files Split-Merge Extension" of the Scheduler Manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Data Spaces</emphasis> - In the ProActive library, data can be accessed through Data Spaces API. You can find the Data Spaces documentation in
					<link xlink:href="../../ReferenceManual/multiple_html/DataSpaces.html">"Chapter 10. Accessing data with Data Spaces API"</link> of the Reference Manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">GCM</emphasis> - ProActive provides an extensible, dynamical and hierarchical component model, Grid Component Model (GCM) based on
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://fractal.objectweb.org">Fractal</link>. The GCM was defined by the
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.coregrid.net/">CoreGRID NoE project</link> and is available
					<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.coregrid.net/mambo/images/stories/Deliverables/d.pm.04.pdf">here</link>.
					You can find the GCM Documentation in the <link xlink:href="../../Components/multiple_html/index.html">Components Manual</link>.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Web Services</emphasis> - ProActive allows to expose an active object as a web service. You can find the documentation of this features
					in <link xlink:href="../../AdvancedFeatures/multiple_html/WebServices.html">"Chapter 4. Exporting active objects as Web Services"</link> of the Advanced Features manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Security</emphasis> - ProActive security mechanism provides a set of security features from basic ones like communications authentication, integrity,
					and confidentiality to more high-level features including secure object migration, hierarchical security policies, and dynamically negotiated policies. You can find Security documentation
					in <link xlink:href="../../AdvancedFeatures/multiple_html/Security.html">"Chapter 2. Security Framework"</link> of the Advanced Features manual.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Fault Tolerance</emphasis> - ProActive can provide fault-tolerance capabilities through two different protocols: a Communication-Induced Checkpointing protocol (CIC) or a pessimistic message logging protocol (PML).
					You can find information on ProActive Fault Tolerance in <link xlink:href="../../AdvancedFeatures/multiple_html/FaultTolerance.html">"Chapter 1. Fault-Tolerance"</link> of the Advanced Features manual.
				</para>
			</listitem>
		</itemizedlist>
	</section>

	<section xml:id="ActiveObjectsModel_20"><info><title>Active Objects Model</title></info>

		<para>ProActive is based on the concept of active object, which is an entity
		with its own configurable activity.
		A distributed or concurrent application using ProActive is composed of a number
		of entities called active objects. Each active object has one distinguished
		element, the root, which is the only entry point to the active object. Each active object
		has its own thread of control and is granted the ability to decide in which order to
		serve the incoming method calls that are automatically stored in a queue of pending
		requests. Method calls sent to active objects are asynchronous with transparent future objects
		and synchronization is handled by a mechanism known as wait-by-necessity. There is a
		short rendezvous at the beginning of each asynchronous remote call, which blocks the
		caller until the call has reached the context of the callee. More detailed information on
		active objects will be presented in "ProActiveBasis".
		</para>
		 <para>
		 The ProActive  solution relies on  asynchronous method
		  calls mastering both complexity and efficiency. It also proposes advanced features such as groups,
		  mobility, and components. In the framework of formal calculus, Asynchronous Sequential Processes
		  (ASP), confluence, and determinism have been
		  proven for this programming model: <xref endterm="TDO-book.abbrev" linkend="TDO-book"/> and <xref endterm="CHSPOPL04.abbrev" linkend="CHSPOPL04"/>.</para>
	 </section>
	<section xml:id="ImplementationLanguage_20"><info><title>Implementation Language</title></info>
		<para>
			Grids gather large amounts of heterogeneous resources, different processor architectures
			and operating systems. In this context, using a language which relies on
			a virtual machine allows maximum portability. ProActive is developed in Java, a
			cross-platform language and the compiled application may run on any operating system
			providing a compatible virtual machine. Moreover, ProActive only relies on standard APIs
			and does not use any operating-system specific routines, other than to run daemons or to
			interact with legacy applications. There are no modifications to the JVM nor to the
			semantics of the Java language, and the bytecode of the application classes is never modified.
		</para>
	</section>

	<section xml:id="Communicationthroughtypedasychronousmessages_20"><info><title>Communication through typed asynchronous messages</title></info>
		<para>
			In ProActive, the distribution is transparent: invoking methods on remote objects
			does not require the developer to design remote objects with an explicit remote mechanism.
			Therefore, the developer can focus on the business logic since the distribution is
			automatically handled and transparent. Moreover, the ProActive library preserves polymorphism
			on remote objects (through the reference stub, which is a subclass of the remote root object).
		</para>
		<para>
			Communication between active objects is realized through method invocations, which are reified
			and passed as messages. These messages are serializable Java objects which may be compared to TCP
			packets. Indeed, one part of the message contains routing information towards the different elements
			of the library, and the other part contains the data to be communicated to the called object.
			Although all communications proceed through method invocations, the communication semantics depends upon
			the signature of the method, and the resulting communication may not always be asynchronous.
			Three cases are possible: synchronous invocation, one-way asynchronous invocation, and asynchronous
			invocation with future result.
		</para>
		<para>
			<itemizedlist>
				<listitem>
						<para>Synchronous invocation:</para>
					<itemizedlist>
						<listitem>
							<para>The method returns a non reifiable object (primitive type or final class):</para>
							<programlisting language="java">boolean foo()</programlisting>
						</listitem>

						<listitem>
							<para>The method declares a thrown exception:</para>
							<programlisting language="java">public void bar() throws AnException</programlisting>
							<para>
								In this case, the caller thread is blocked until the reified invocation
								is effectively processed and the eventual result (or exception) is returned.
								It is fundamental to keep this case in mind, because some APIs define methods
								which throw exceptions or return non-reifiable results.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>One-way asynchronous invocation:</para>
					<itemizedlist>
						<listitem>
							<para>The method does not throw any exception
								and does not return any result:</para>
							<programlisting language="java">public void gee()</programlisting>
							<para>
								The invocation is asynchronous and the process flow of the caller
								continues once the reified invocation has been received by the active
								object (in other words, once the rendezvous is finished).
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>Asynchronous invocation with future result:</para>
					<itemizedlist>
						<listitem>
							<para>the return type is a reifiable type,
								and the method does not throw any exception:
							</para>
							<programlisting language="java">public MyReifiableType baz()</programlisting>
							<para>
								In this case, a future object is returned and the caller continues its execution
								flow. The active object will process the reified invocation according to its serving
								policy, and the future object will then be updated with the value of the result of the
								method execution.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>

		</para>
		<para>
			If an invocation from an object A on an active object B  triggers another invocation
			on another active object C, the future result received by A may be updated with another
			future object. In that case, when the result is available from C, the future of B
			is automatically updated, and the future object in A is also update with this result
			value, through a mechanism called automatic continuation.
		</para>
	</section>

	<section xml:id="ProgrammingWithComponentsGCM_20"><info><title>Programming With Components: GCM</title></info>
	<para>
	ProActive programming also features a general purpose component
	framework allowing software architects to design their parallel applications
	using a hierarchical component framework: the Grid Component Model
	(GCM).</para>
	<para>
	The GCM is a high level programming framework which relies on
	Active Object and therefore inherits usual ProActive properties like
	asynchronous call, automatic continuation, deployment interoperability...
	</para>
	<para>
	The GCM extends the Fractal
	component model to cover
	distribution and parallel application's needs.
	Using the GCM, you can
	easily express at design time the dependencies
	between software blocks
	composing your application. In addition, GCM
	components provide non-functional features allowing developers to
	benefits extra capabilities such as monitoring, autonomic management...
	</para>
	<para>
	The GCM provides software
	architects with a comprehensive framework to express at design
	time the parallelism and the distribution of an application.
	Thus, the architecture of the system itself captures the
	parallel/distributed aspects, acting as a powerful specification and
	documentation. Furthermore, developers do not need to spend extensive time
	to learn distribute programming or implement collective communication,
	but rather concentrate on the business code and leverage the GCM
	framework.
	 </para>
	</section>


	<section xml:id="Libraryfeatures_20"><info><title>Library features</title></info>
		<para>
			ProActive uses the  "MOP" to provide flexibility and configurability: it
			allows the addition of meta-objects for managing new required features. Moreover, the library also
			proposes a deployment framework, which allows the deployment of active objects on various
			infrastructures. The MOP architecture is represented in the next figure.
		 <figure xml:id="MOParchitecture_20"><info><title>MOP architecture</title></info>


        <mediaobject>

          <imageobject>
            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/MetaObject_Architecture.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

		</para>
		<para> The library may be represented in four layers: IDE, programming model,
		deployment facilities, and non-functional features. </para>
		<para>
		ProActive offers IC2D, an interactive graphical environment for remote monitoring and control of
		distributed applications. Due to the fact that it uses the standard (starting with the J2SE platform 5.0)
		Java Management Extensions (JMX) technology in order to monitor distribution, IC2D can be deployed without
		requiring changes to the JVM or Java.
		</para>
		<para>
		 The programming model consists of the active objects model which offers asynchronous communication,
		typed group communication, and the object-oriented SPMD programming paradigm. In addition to the
		standard object oriented programming paradigm, ProActive also proposes a component-based programming
		paradigm, by providing an implementation of the Fractal component model geared at Grid computing.
		</para>

		<para>The deployment layer includes a deployment framework (detailed in "ProActiveDeployment")
		and it allows the
		 creation of remote active objects on various infrastructures. A scheduler is also proposed to manage the deployment
		 of jobs. The load-balancing framework uses the migration capabilities to optimize the placement of the
		 distributed active objects.
		</para>
		<para>
			Non-functional features include a transparent fault-tolerance mechanism based on a communication-induced
			check-pointing protocol, a security framework for communications between remote active objects,
			migration capabilities for the mobility of active objects, a mechanism for the management of exceptions,
			a complete distributed garbage collector for active objects, and a mechanism for wrapping legacy code,
			notably as a way to control and interact with MPI applications.

		</para>
		<para>
		 In the communication layer, several protocols are provided for the communication between active objects:
			Java RMI as the default protocol, SSH, HTTP, tunneled RMI. It is also possible to export active objects as Web
			Services, which can then be accessed using the standard SOAP protocol. A file transfer mechanism is also
			implemented. It allows the transfer of files between active objects, for instance to send large data input files
			or to retrieve results files.</para>
		</section>
</section>

</chapter>
