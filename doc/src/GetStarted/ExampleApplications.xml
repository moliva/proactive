<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ExampleApplications"><info><title>ProActive Example
   Applications</title></info>

	<indexterm>
		<primary>Examples</primary>
	</indexterm>
	<indexterm>
		<primary>Use cases</primary>
	</indexterm>


  <section xml:id="C3D_example"><info><title>C3D: A distributed 3D renderer</title></info>

	<indexterm>
		<primary>Examples</primary>
		<secondary>C3D: A distributed 3D renderer</secondary>
	</indexterm>

    <para>Distribution is often used for CPU-intensive applications where
    parallelism is a key for performance. The parallelization of programs can be facilitated with
    ProActive, thanks to asynchronous method calls (see
	<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../ReferenceManual/multiple_html/ActiveObjectCreation.html#FutureObjectCreation">Asynchronous calls and futures</link>),
	as well as group communications (see
	<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../ReferenceManual/multiple_html/TypedGroupCommunication.html">Typed Group Communication</link>).</para>

    <para>To illustrate how parallelization can be used for computationally
    intensive tasks, we have built the C3D application.
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/c3d.htm">C3D</link> is
    a Java benchmark application that measures the performance of a 3D
    raytracer renderer distributed over several Java virtual machines using
    Java RMI. It shows some of the benefits of ProActive, in particular the ease
    of distributed programming and the speedup through distributed parallel
    calculation. This benchmark gives indication of
     the performance of the serialization process and Java RMI
     itself. The benchmark is an automated version of C3D which is both
     a collaborative application and a distributed raytracer: users can
     interact through messaging and voting facilities in order to choose
     a scene that is renderer using a set of distributed rendering engines
     working in parallel. Near-linear speedup is achieved with up to half
     a dozen rendering engines running in parallel that communicate using Java RMI
     and controlled by a central dispatcher.</para>

    <figure xml:id="Theactiveobjectsinthec3dapplication_61"><info><title>Active objects in the c3d application</title></info>
      <mediaobject>
        <imageobject>
          <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/c3d.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>

	<section xml:id="HowtouseC3D_61"><info><title>How to use C3D</title></info>

	<para>
	The C3D application uses three scripts that can be found under the <literal>ProActive/examples/c3d</literal> directory:
	</para>
	<itemizedlist>
		<listitem>
			<para><literal>c3d_one_user.sh</literal> or <literal>c3d_one_user.bat
			 </literal> launches  the C3D Dispatcher with four rendering engines and one user.</para>
		</listitem>

		<listitem><para>
			<literal>c3d_no_user.sh</literal> or <literal>c3d_no_user.bat</literal>
			launches the C3D Dispatcher with four rendering engines and no user
			</para>
		</listitem>
		<listitem>
			<para>
			<literal>c3d_add_user.sh</literal> or <literal>
			c3d_add_user.bat</literal> adds another users
			</para>
		</listitem>
	</itemizedlist>

	<para>To use the application first start the dispatcher using either
	<literal>c3d_one_user.[sh, bat]</literal> or <literal>c3d_no_user.[sh, bat]</literal>
	and then add users with <literal>c3d_add_user.[sh, bat]</literal>.</para>
	<para>
      <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/c3d_dispatcher_app.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
		</para>
		<para>
       <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/c3d_specify_host.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
      </para>
      <para>
		<informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/c3d_user_alice.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
		</para>
	</section>

  </section>

  <section xml:id="ReadersWritersApplication_61"><info><title>Readers/Writers Application</title></info>

	<indexterm>
		<primary>Examples</primary>
		<secondary>Readers/Writers application</secondary>
	</indexterm>

    <para>ProActive provides an advanced synchronization mechanism that allows
    an easy and safe implementation of complex synchronization
    policies.</para>

      <para>
      The readers/writers application shows the synchronization
      capabilities of ProActive. In order
      to allow concurrency while ensuring the consistency of the readings,
      data accesses have to be synchronized with a specified policy.
      </para>

      <para>The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/reader_writers.htm">implementation
      with ProActive</link> uses 3 active objects: Reader, Writer, and the
      controller class (ReaderWriter).</para>

      <section xml:id="HowtousetheReadersWriters_61"><info><title>How to use the Readers/Writers</title></info>


        <para>To start application, use <literal>examples/readers</literal>.</para>

        <para>ProActive starts a node (on an already existing JVM or on a new one) on the current machine and
        creates 3 Writers, 3 Readers, a ReaderWrite (the application controller)
        and a ReaderDisplay, which are all active objects.</para>

      <para>The examples has three synchronization modes "Priority to Writers",
		"Priority to Readers", and "Even Policy". The application is able
		to assign different priority to readers or writers without blocking on reading or writing.
	</para>


        <para><figure xml:id="a_gui_for_readers_writers"><info><title>Started GUI illustrating the activities of Reader and Writer objects.</title></info>


            <mediaobject>
              <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/readers_app.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure></para>


     </section>
	</section>
	<section xml:id="Thediningphilosophers_61"><info><title>The dining philosophers</title></info>

	<indexterm>
		<primary>Examples</primary>
		<secondary>The dining philosophers</secondary>
	</indexterm>

      <para>The 'dining philosophers' problem is a classic exercise in
      concurrent programming with the goal of avoiding deadlocks. In this
      problem, there are five philosophers sitting around a dinner table
      and sharing five forks. The philosophers alternate between eating and
      thinking. When eating, a philosopher must use the two forks adjacent to him.
      As there are not enough forks for all the philosophers to eat at the
      same time, the possibility of deadlock arises.</para>

      <para>We have provided <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/dining_philosophers.htm">an
      illustration of the solution</link> using ProActive, where all the
      philosophers are active objects, as well as the table (controller) and
      the dinner frame (user interface).</para>

      <section xml:id="Howtousethephilosophersapplication_61"><info><title>How to use the philosophers application</title></info>


      <para>To start the application use the <literal>examples/philosophers/philosophers.sh</literal>
        or <literal>examples\philosophers\philosophers.bat</literal> script depending on your operating
        system.
        </para>

        <para>ProActive creates a new node and instantiates the active objects
        of the application: DinnerLayout, Table, and Philosopher.</para>

        <para>
		<figure xml:id="TheDiningPhilosophersExample_61"><info><title>The Dining Philosophers Example</title></info>

            <mediaobject>
              <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/philosophers_app.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
         </para>

        <para>The pictures represent the state of the philosophers. They can
        be:</para>

        <itemizedlist>
          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/think.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">philosophizing</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/wait.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">hungry, wants the
            fork!</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/eat.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">eating</emphasis></para>
          </listitem>
        </itemizedlist>

        <para>The forks can have two states:</para>

        <itemizedlist>
          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/fork1.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">taken</emphasis></para>
          </listitem>

          <listitem>
            <para><inlinemediaobject>
                <imageobject>
                  <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/fork0.png" format="PNG"/>
                </imageobject>
              </inlinemediaobject> <emphasis role="bold">free</emphasis></para>
          </listitem>
        </itemizedlist>
      <para>You can either run the application in autopilot mode running it on its own without encountering a
        deadlock or in manual mode where you click on the philosophers' heads to switch their modes.
        With the second mode, you can, for instance, make one of the philosophers starve, making his two closer neighbours alternatively eat and think.</para>
      </section>


  </section>

  <section xml:id="Migrationofactiveobjects_61"><info><title>The migratory penguins</title></info>


    <indexterm>
      <primary>Examples</primary>
      <secondary>The migratory penguins</secondary>
    </indexterm>

    <para>ProActive allows the transparent migration of active objects between
    virtual machines. The migration happens while the application containing the
    active objects is running and without interruptions in the application.</para>


    <para>The penguin migration example shows how a set of mobile
    agents can move around from machine to machine while
    still communicating with their base and
    with each other. It also features the ability to move a swing window
    between screens while moving an agent from one JVM to the other.</para>

    <section xml:id="Howtousethepenguinapplication_61"><info><title>How to use the penguin application</title></info>


      <para>Use the <literal>examples/penguin/penguin.sh</literal> or <literal>examples/penguin/penguin.bat</literal>
       script to start the penguin controller. The controller allows you to add
       a new agent (penguin), and control its route. </para>


	<informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/penguin_controller.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>


      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/penguin.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure></para>


          <para>The active object is moving between machines (specified
          in the deployment descriptor)
          and the penguin window disappears and reappears on the screen
          associated with the new JVM.</para>
  </section>
    <section xml:id="HowtousethePenguinController_61"><info><title>How to use the Penguin Controller</title></info>


      <para>After selecting them, use buttons to:</para>

      <itemizedlist>
         <listitem>
          <para>Add agents - Start Agent</para>
        </listitem>
        <listitem>
          <para>Communicate with them ('chained calls')</para>
        </listitem>

        <listitem>
          <para>Send the agent on the itinerary - Start, Suspend, Resume</para>
        </listitem>

        <listitem>
	          <para>Trigger a communication between them ('call another
          agent')</para>
        </listitem>
      </itemizedlist>


    </section>
  </section>

	<section xml:id="Chatexample_61"><info><title>Chat example</title></info>

    <indexterm>
      <primary>Examples</primary>
      <secondary>Chat application</secondary>
    </indexterm>

	<para>
		ProActive has support for groups and migration. To show this, we
		have programmed a simple chat application using the groups framework.
		The application clients can communicate with each other in a decentralized
		manner and can migrate from computer to computer.</para>

		<section xml:id="HowtoruntheChatapplication_61"><info><title>How to run the Chat application</title></info>

		<para>
			To start a chat client, run <literal>chat.sh</literal>
			or <literal>chat.bat</literal> from the <literal>examples/chat/</literal> folder.
			The syntax is <literal>chat.[sh|bat] user_name host_to_connect_to user_to_connect_to </literal>.
		</para>
		<para>
			When you start the first client the last argument can have any value. However if you want
			to connect to another chat you have to supply a valid user name and host. The communication
			is not dependent on any particular user. The first user that created the chat can leave and
			the other users can still communicate.
		</para>

		<para>Start the first user by running <literal>chat.[sh|bat] toto localhost no_user</literal>.
		The following window appears:</para>
		<para>

		<informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/toto_chat.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
		</para>

		<para>To connect the user "tutu", run <literal>chat.[sh|bat] tutu localhost toto</literal>.</para>
		<para>

		<informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/tutu_chat.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
		</para>

		<para>You can later connect other users in the same manner. Run <literal>chat.[sh|bat] tata localhost tutu</literal>.
		You can connect to any user in the chat and you will have access to all the users. </para>



		</section>

		<section xml:id="Chatmigration_61"><info><title>Chat migration</title></info>

			<para>
			The chat application can be migrated to another computer.
			All we have to do in order to fully migrate one chat is to start a node on the
			remote computer using
			<literal>startNode.sh</literal> or <literal>startNode.bat</literal> from
			the <literal>ProActive/bin/</literal> folder. We have to use a parameter in the form of
			<literal>rmi://hostname:port/node_name</literal> to start the node. Port number is
         not mandatory. If you do not precise it, the node will be started on the default port,
         that is 1099.
			After starting the node, we can migrate the chat application
			by putting the URL <literal>//hostname:port/node_name</literal> in the
			"migrate to" textbox and clicking on the Migrate button. For the migration, port is
         number is mandatory.
			The application will be recreated on the remote computer with its state
			intact and ready to communicate to the other users.
			</para>
		</section>
	</section>


  <!-- Pi MPI -> Pi ProActive -->

  <section xml:id="IntegralPi_61"><info><title>Integral Pi</title></info>

    <indexterm>
      <primary>Examples</primary>
      <secondary>Intregal Pi</secondary>
    </indexterm>

    <section xml:id="Introduction_61"><info><title>Introduction</title></info>

      <para>In this chapter, we are going to see a simple example of an MPI
      written program ported to ProActive.</para>

      <para>First let's introduce what we are going to compute.</para>

      <para>The MPI PI program approximates <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Pi">pi</link> by computing:</para>

      <para>
         <inlinemediaobject>
            <imageobject>
               <imagedata scalefit="1" fileref="images/png/guided_tour/integral.png" format="PNG"/>
            </imageobject>
         </inlinemediaobject>
      </para>

      <para>Which is approximated by:</para>

      <para>
         <inlinemediaobject>
            <imageobject>
               <imagedata scalefit="1" fileref="images/png/guided_tour/sum.png" format="PNG"/>
            </imageobject>
         </inlinemediaobject>
      </para>

      <para>The only input data required is therefore <emphasis>N</emphasis>, the number of
      iterations.</para>

      <para>Involved files :</para>

      <itemizedlist>
        <listitem>
          <para><literal>ProActive/src/Examples/org/objectweb/proactive/examples/documentation/integralpi/int_pi2.c</literal>: the original MPI
          implementation</para>
        </listitem>

        <listitem>
          <para><literal>ProActive/src/Examples/org/objectweb/proactive/examples/integralpi/Launcher.java</literal>: the main class</para>
        </listitem>

        <listitem>
          <para><literal>ProActive/src/Examples/org/objectweb/proactive/examples/integralpi/Worker.java</literal>: the class implementing the SPMD code</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="Initialization_61"><info><title>Initialization</title></info>


      <section xml:id="MPIInitializationprimitives_61"><info><title>MPI Initialization primitives</title></info>


        <para>Some basic primitives are used. Notice that MPI provides a rank
        to each process and the group size (the number of involved processes
        ).</para>

         <programlisting language="c"><textobject><textdata fileref="./automatic_snippets/integralPi_1.snip"/></textobject></programlisting>
      </section>

      <section xml:id="ProActiveInitializationprimitives_61"><info><title>ProActive Initialization primitives</title></info>


        <para>First, we need to create the group of workers (MPI processes
        represented by active objects). Notice that the creation of active
        objects is done in Launcher.java.</para>

        <para>The group of active objects is created using given
        parameters and nodes specified in the deployment
        descriptor.</para>

         <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/integralPi_2.snip"/></textobject></programlisting>

        <para>As with MPI, the ProActive's SPMD layer provides some initialization
        primitives. In Worker.java you can identify this initialization. Note
        that one-to-one communications will be done thanks to an array view on
        the created group.</para>

         <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/integralPi_3.snip"/></textobject></programlisting>
      </section>
    </section>

    <section xml:id="Communicationprimitives_61"><info><title>Communication primitives</title></info>


      <section xml:id="Communicationpattern_61"><info><title>Communication pattern</title></info>


        <para>The communication pattern is very simple. It is done in two steps:
        first, the process 0 broadcasts N processes and then waits for the result from each
        other process and secondly, sums the received values.</para>
      </section>

      <section xml:id="MPIApproach_61"><info><title>MPI Approach</title></info>


        <para>The MPI implementation involves 3 communication primitives:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">MPI_Send</emphasis> ( Sends data to
            one process )</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">MPI_Recv</emphasis> ( Receives data
            from a sending process )</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">MPI_Bcast</emphasis> ( Broadcast a
            data to all processes )</para>
          </listitem>
        </itemizedlist>

        <para>Please note that MPI_Bcast, MPI_Send and MPI_Recv primitives are
        blocking.</para>

         <programlisting language="c"><textobject><textdata fileref="./automatic_snippets/integralPi_4.snip"/></textobject></programlisting>

         <para>Where the <literal>solicit</literal> method looks like this: </para>

         <programlisting language="c"><textobject><textdata fileref="./automatic_snippets/integralPi_5.snip"/></textobject></programlisting>
      </section>

      <section xml:id="ProActiveApproach_61"><info><title>ProActive Approach</title></info>


        <para>The ProActive implementation is quite similar to MPI one. The
        fact is that all communications in ProActive are asynchronous (non-blocking)
        by default, therefore we need to specify explicitly to
        block until a specific request.</para>

         <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/integralPi_6.snip"/></textobject></programlisting>

        <para>The leader blocks his request queue until another worker will do
        a distant call on the leader's <emphasis role="bold">updateX</emphasis> method which is:</para>

         <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/integralPi_7.snip"/></textobject></programlisting>
      </section>
    </section>

    <section xml:id="RunningthePIexample_61"><info><title>Running the PI example</title></info>


        <para>In <literal>examples/integralPi</literal>, run <literal>integralpi.[sh|bat]</literal>.
        You can specify the number of workers from the command line. Feel free
        to edit scripts to specify another deployment descriptor.</para>

        <screen>bash-3.00$ ./integralpi.sh

--- IntegralPi --------------------------------------------------
The number of workers is 4
 --&gt; This ClassFileServer is reading resources from classpath 2011
Created a new registry on port 1099
ProActive Security Policy (proactive.runtime.security) not set. Runtime Security disabled
************* Reading deployment descriptor: file:./../../descriptors/Matrix.xml ********************
created VirtualNode name=matrixNode
**** Starting jvm on amda.inria.fr
**** Starting jvm on amda.inria.fr
**** Starting jvm on amda.inria.fr
ProActive Security Policy (proactive.runtime.security) not set. Runtime Security disabled
 --&gt; This ClassFileServer is reading resources from classpath 2012
ProActive Security Policy (proactive.runtime.security) not set. Runtime Security disabled
ProActive Security Policy (proactive.runtime.security) not set. Runtime Security disabled
 --&gt; This ClassFileServer is reading resources from classpath 2013
 --&gt; This ClassFileServer is reading resources from classpath 2014
**** Starting jvm on amda.inria.fr
Detected an existing RMI Registry on port 1099
Detected an existing RMI Registry on port 1099
Detected an existing RMI Registry on port 1099
ProActive Security Policy (proactive.runtime.security) not set. Runtime Security disabled
 --&gt; This ClassFileServer is reading resources from classpath 2015
//amda.inria.fr/matrixNode2048238867 successfully bound in registry at //amda.inria.fr/matrixNode2048238867
**** Mapping VirtualNode matrixNode with Node: //amda.inria.fr/matrixNode2048238867 done
//amda.inria.fr/matrixNode690267632 successfully bound in registry at //amda.inria.fr/matrixNode690267632
**** Mapping VirtualNode matrixNode with Node: //amda.inria.fr/matrixNode690267632 done
//amda.inria.fr/matrixNode1157915128 successfully bound in registry at //amda.inria.fr/matrixNode1157915128
**** Mapping VirtualNode matrixNode with Node: //amda.inria.fr/matrixNode1157915128 done
Detected an existing RMI Registry on port 1099
//amda.inria.fr/matrixNode-814241328 successfully bound in registry at //amda.inria.fr/matrixNode-814241328
**** Mapping VirtualNode matrixNode with Node: //amda.inria.fr/matrixNode-814241328 done
4 nodes found
Generating class : pa.stub.org.objectweb.proactive.examples.integralpi.Stub_Worker

Enter the number of iterations (0 to exit) : 100000
Generating class : pa.stub.org.objectweb.proactive.examples.integralpi.Stub_Worker
Generating class : pa.stub.org.objectweb.proactive.examples.integralpi.Stub_Worker
Generating class : pa.stub.org.objectweb.proactive.examples.integralpi.Stub_Worker
Generating class : pa.stub.org.objectweb.proactive.examples.integralpi.Stub_Worker

         Worker 2 Calculated x = 0.7853956634245252 in 43 ms


         Worker 3 Calculated x = 0.7853906633745299 in 30 ms


         Worker 1 Calculated x = 0.7854006634245316 in 99 ms


         Worker 0 Calculated x = 3.141592653598117 in 12 ms


Calculated PI is 3.141592653598117 error is 8.324008149429574E-12

Enter the number of iterations (0 to exit) :  </screen>
    </section>
  </section>



	<!-- NBODY -->

	<section xml:id="nbody"><info><title xml:id="Thenbodyexample_61">The nbody example</title></info>

    <indexterm>
      <primary>Examples</primary>
      <secondary>The NBody example</secondary>
    </indexterm>

            <para>
                n-body is a classic problem consisting of calculating
                the position of bodies in space. The position depends only on
                the gravitational forces existing between themselves.
                In short, we consider several bodies (sometimes called
                particles) in space, where the only force is due to
                gravity. When only two bodies are at hand, this force is
                expressed as
            </para>
            <para>
                <informaltable colsep="0" frame="none">
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <para>
                                        <informalfigure>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/interactions.png" format="PNG"/>
                                                </imageobject>
                                            </mediaobject>
                                        </informalfigure>
                                    </para>
                                </entry>
                                <entry>
                                    <para>
                                        <informalfigure>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/forces_simple.png" format="PNG"/>
                                                </imageobject>
                                            </mediaobject>
                                        </informalfigure>
                                        F
                                        <subscript>p-&gt;b</subscript>
                                        is the force that p applies on
                                        b, G is the gravitational
                                        constant, m
                                        <subscript>p</subscript>,
                                        m
                                        <subscript>b</subscript>
                                        describe the mass of the bodies,
                                        r is the distance between p and
                                        b and u is a unit vector in the
                                        direction going from p to b.
                                        When we consider all the forces
                                        that apply to one given body, we
                                        have to sum up the contribution
                                        of all the other bodies:
                                    </para>
                                    <para>
                                        <informalfigure>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/forces_sum.png" format="PNG"/>
                                                </imageobject>
                                            </mediaobject>
                                        </informalfigure>
                                    </para>
                                    <para>
                                        This should be read as: the
                                        total force on the body b is the
                                        sum of all the forces applied to
                                        b, generated by all the other
                                        bodies in the system.
                                    </para>
                                    <para>
                                        This is the force that has to be
                                        computed for every body in the
                                        system. With this force, using
                                        the usual physics formulae,
                                        (Newton's second Law)
                                    </para>
                                    <para>
                                        <informalfigure>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/acc.png" format="PNG"/>
                                                </imageobject>
                                            </mediaobject>
                                        </informalfigure>
                                    </para>
                                    <para>
                                        We can now compute the movement
                                        of a particle for a given time
                                        step (a the acceleration, v the
                                        velocity, x the position, t the
                                        time):
                                    </para>
                                    <para>
                                        <informalfigure>
                                            <mediaobject>
                                                <imageobject>
                                                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/movement_equations.png" format="PNG"/>
                                                </imageobject>
                                            </mediaobject>
                                        </informalfigure>
                                    </para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
            </para>

        <section xml:id="Howtorunthenbodyexample_61"><info><title>How to run the n-body example</title></info>

            <para>
                In the folder
                <literal>ProActive/examples/</literal>, run:
            </para>

            <screen>nbody.[bat|sh] [-nodisplay | -displayft | -3d | -3dft] totalNbBodies maxIter</screen>

            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">No parameter</emphasis>
                        starting in default mode (2D).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">-nodisplay</emphasis>
                        starting in console mode.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">-displayft</emphasis>
                        starting with fault-tolerance configuration.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">-3d</emphasis>
                        starting GUI in 3D, must have
                        <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-138252.html">
                            Java3d
                        </link>
                        (≥ 1.4) installed and also must have ProActive
                        compiled with it.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">-3dft</emphasis>
                        same as above with fault-tolerance
                        configuration.
                    </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">totalNbBodies</emphasis>
                        is the total number of bodies, default is 4
                        bodies.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">maxIter</emphasis>
                        is the maximun number of iterations, default is
                        10,000 iterations.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Right after starting the application, users have to
                choose one algorithm for computing amongst the following ones:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Simplest version, one-to-one communication and
                        master.
                    </para>
                </listitem>
                <listitem>
                    <para>Group communication and master.</para>
                </listitem>
                <listitem>
                    <para>
                        Group communication, odd-even-synchronization.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Group communication, oospmd synchronization.
                    </para>
                </listitem>
                <listitem>
                    <para>Barnes-Hut.</para>
                </listitem>
            </itemizedlist>
            <para>Mouse controls with the 3D GUI:</para>
            <itemizedlist>
                <listitem>
                    <para>Left click: rotating.</para>
                </listitem>
                <listitem>
                    <para>Right click: moving the scene.</para>
                </listitem>
                <listitem>
                    <para>Scroll whell: zoom in/out</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="BarnesHut_61"><info><title>Barnes-Hut</title></info>

            <para>
                This way to construct the nbody simulation is based on a
                very different algorithm. This is described here to show how
                one can express this algorithm in ProActive, but having a different
                approach to solve the problem. Here's how it works:
            </para>
            <para>
                To avoid broadcasting the new
                position of every particle to every active object, a tree implementation can
                simplify the problem by agglomerating sets of particles
                as a single particle, with a mass equal to the sum of
                masses of all the particles. This is the core of
                the Barnes-Hut algorithm. This method allows us to have a complexity brought
                down to O(N log N).
            </para>
            <para>
                In our parallel implementation, we have defined an
                <literal>Active Object</literal>
                called
                <literal>Domain</literal>
                , which represents a volume in space, and which contains
                <literal>Planets</literal>
                . It is either subdivided into smaller
                <literal>Domains</literal>
                , or is a leaf of the total tree, and then only contains
                <literal>Planets</literal>
                . A Planet is still an Object with mass, velocity and
                position, but is no longer on a one-to-one connection
                with a
                <literal>Domain</literal>
                . We have cut down communications to the biggest
                <literal>Domains</literal>
                possible: when a
                <literal>Planet</literal>
                is distant enough, its interactions are not computed,
                but it is grouped with its local neighbours to a bigger
                particle. Here is an example of the
                <literal>Domains</literal>
                which would be known by the
                <literal>Domain</literal>
                drawn in red:
            </para>
            <informaltable frame="none">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>
                                <para>
                                    <informalfigure>
                                        <mediaobject>
                                            <imageobject>
                                                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/Domain_subdivision.png" format="PNG"/>
                                            </imageobject>
                                        </mediaobject>
                                    </informalfigure>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <informalfigure>
                                        <mediaobject>
                                            <imageobject>
                                                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/tree.png" format="PNG"/>
                                            </imageobject>
                                        </mediaobject>
                                    </informalfigure>
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>
                The Domain in the lower right hand-corner, drawn in blue,
                is also divided into sub-Domains, but that does not need to be
                known by the Domain in red: it assumes all the particles
                in the blue Domain are only one big one, centered at the
                center of mass of all the particles within the blue.
            </para>
            <para>
                In this version,
                <literal>Domains</literal>
                communicate with a reduced set of other
                <literal>Domains</literal>
                , spanning on volumes of different sizes.
                Synchronization is achieved by sending explicitly
                iteration numbers, and returning when needed older
                positions. You may notice that some
                <literal>Domains</literal>
                seem desynchronized with other ones, having several
                iterations in-between. That is not a problem because if they
                need to be synchronized and send each other
                information, a mechanism saving the older positions
                permits to send them when needed.
            </para>
              <para>
			 This is a snapshot of the ProActive n-body
                example running on 3 hosts with 8 bodies:
            </para>
            <para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/gui.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>
				<para>
				 And here is a n-body screenshot, with the application GUI and
                        Java3D installed:
                </para>

            <para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/guided_tour/gui3d.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>

        </section>
    </section>

   <section xml:id="Conclusion_61"><info><title>Conclusion</title></info>

         <para>These are some examples amongst all the ProActive examples present in the ProActive
         distribution. To see a full list of examples, please refer to
         the
         <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/index.php?page=applications">
         application</link> web page.</para>
   </section>

</chapter>
