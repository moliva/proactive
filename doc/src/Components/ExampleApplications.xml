<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ExampleApplications"><info><title>ProActive Example
   Applications Using Components</title></info>

	<!-- COMPONENTS -->

    <section xml:id="C3D_component_example"><info><title xml:id="C3DActiveObjectstoComponents_61">C3D - Active Objects to Components</title></info>

        <para>
            The standard C3D example has been
            taken as a basis and component wrappers have been created.
            This is an example of an application that is refactored to
            fit the component paradigm.
            This way, one can see what is needed to transform an
            application into component-oriented code.
        </para>
        <para>
            You may find the code in the
            <literal>ProActive/src/Examples/org/objectweb/proactive/examples/components/c3d</literal>
            directory of the proactive source.
        </para>
		<section xml:id="RefactoringC3Dwithcomponents_61"><info><title>Refactoring C3D  with components</title></info>

         <para>
            Add wrappers around the
            original object classes (C3D*) and instead of linking the
            classes together by setting fields through the initial
            methods, do that in the binding methods. In other words, we
            have to spot exactly where C3DRenderingEngine, C3DUser and
            C3DDispatcher are used by a class other than itself, and
            turn these references into component bindings. Obviously, we
            also have to expose the interfaces that we are going to use,
            that is to say, the Dispatcher, Engine and User interfaces that have to
            be implemented.
        </para>

            <figure xml:id="informal_description_of_c3d_hierarchy"><info><title>Informal description of the C3D Components hierarchy</title></info>

                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/C3D-Components-UML.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        <para>
            First of all, have a look at the doc on C3D to remember how
            this application is written, in
			<link xlink:href="../../GetStarted/multiple_html/ExampleApplications.html#C3D_example">Chapter 5.1. C3D: A distributed 3D renderer</link>.
            The most important thing to keep in mind is the class diagram, showing C3DUser,
            C3DDispatcher and C3DRederingEngine. We decided that the
            only objects that worth wrapping in components were those three,
            remaining objects being too small to get worried about them.
        </para>
    </section>

        <section xml:id="Creatingtheinterfaces_61"><info><title>Creating the interfaces</title></info>

            <para>
                What we need to do is to extract the object interfaces,
                i.e. to find which methods are going to be called on
                the components. This means find out what methods are
                called from outside the active object. You can do that
                by searching in the classes where the calls are made on
                active objects. For this,
                <emphasis role="bold">
                    you have to know in detail which classes are going
                    to be turned into component
                </emphasis>
                . If you have a code base which closely follows object
                oriented programming rules, the interfaces are already
                there. Indeed, when a class is written, it should always
                go with one or more interfaces, which present to the
                world what the class abilities are. In C3D (Active
                Object version), these interfaces already exist: they
                are called
                <literal>User</literal>
                ,
                <literal>Engine</literal>
                and
                <literal>Dispatcher</literal>
                .
            </para>
            <note>
                <para>
                    <emphasis role="bold">Tricky part:</emphasis>
                    whatever way you look at components, you will have to
                    modify the initial code if these interfaces were not
                    created at first go. You have to replace all the
                    class references by their interface, when you use
                    them in other files. For example, if we had not
                    already used interfaces in the C3D object code, we
                    would have had to replace all occurrences of
                    C3DDispatcher by occurrences of Dispatcher.
                </para>
            </note>
            <para>
                Why do we have to do that, replacing classes by
                interfaces? That is due to the way components work. When
                the components are going to be bound, you are not binding
                the classes themselves (i.e. the container which performs
                operations), but proxies to the interfaces presenting
                the behaviour available. And these proxies implement the
                interfaces, and do not extend the classes. What is
                highlighted here is that components enforce good code
                design by separating behaviours.
            </para>
        </section>
        <section xml:id="CreatingtheComponentWrappers_61"><info><title>Creating the Component Wrappers</title></info>

            <para>
                You now have to create a class that embraces the
                previous active objects, and which is a component
                representing the same functionality. How do you do that?
                Pretty simple. All you need to do is to extend the active
                object class, and add to it the non-functional
                interfaces which go with the component. You have the
                binding interfaces to create, which basically say how to
                put together two components, tell who is already
                attached, and how to separate them. These are the
                <literal>lookupFc</literal>
                ,
                <literal>listFc</literal>
                ,
                <literal>bindFc</literal>
                and
                <literal>unbindFc</literal>
                methods.
            </para>
            <para>
                This has been done in the
                <literal>*Impl</literal>
                files. Let's consider, for example, the UserImpl class.
                What you have here are those
                component methods. Be even more careful with this
                <literal>bindFc</literal>
                method. In fact, it really binds the protected
                <literal>Dispatcher</literal>
                variable
                <literal>c3ddispatcher</literal> as shown hereafter:
            </para>

            <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/C3D_Components_1.snip"/></textobject></programlisting>

            <para>
                This way, the
                <literal>C3DUser</literal>
                code can now use this variable as if it was addressing
                the real active object. To be accurate, we have to
                point out that you are going through proxies before
                reaching the component, then the active object. This is
                hidden by the ProActive layer. All you should know is that
                you are addressing a
                <literal>Dispatcher</literal>.
                The <literal>findDispatcher</literal>
                method has been overridden because component lookup
                does not work like standard Active Object lookup.
            </para>
        </section>
        <section xml:id="Componentlookupandregistration_61"><info><title>Component lookup and registration</title></info>

            <para>
                When running the User Component alone, you are prompted
                for an address on which to lookup a Dispatcher
                Component. Then, the two components are bound through a
                lookup mechanism. This is very simple to use. Here is the
                code to do that:
            </para>


                <para>The component Registration</para>
                <para>
                     <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/C3D_Components_2.snip"/></textobject></programlisting>
                </para>
                <para>The Component lookup</para>
                <para>
                     <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/C3D_Components_3.snip"/></textobject></programlisting>
                </para>
            <para>
                For the registration, you only need a reference on the
                component you want to register and a name to give to this component.
            </para>
            <para>
                The
                <literal>Fractive.lookup</literal>
                method uses a URL to find the host which holds the
                component. This URL contains the machine name of the
                host, the communication protocol and the port number, but also the
                lookup name under which the desired component has been
                registered under, here "Dispatcher". The last operation
                consists only in retrieving the correct interface to
                which to connect to. If the interface is not known at
                compile-time, it can be discovered at run-time with the
                <literal>getFcInterfaces()</literal>
                method, which lists all the available interfaces.
            </para>
        </section>
        <section xml:id="HowtoruncomponentsC3D_61"><info><title>How to run components C3D</title></info>

        <para>
            There is only one access point for this example in the
            scripts directory:
        </para>
        <screen>examples/c3d$ ./c3d_component.sh
--- Fractal C3D example ---------------------------------------------
Parameters : descriptor_file [fractal_ADL_file]
        The first file describes your deployment of computing nodes.
                You may want to try ../../../descriptors/components/C3D_all.xml
        The second file describes your components layout.
                Default is org.objectweb.proactive.examples.components.c3d.adl.userAndComposite
---------------------------------------------------------</screen>
        <para>
            There are two ways to start the components C3D. If you only
            want to start the composite (Dispatcher + Renderer), type:
        </para>
        <screen>examples/c3d$ ./c3d_component.sh \
../../../descriptors/components/C3D_all.xml \
org.objectweb.proactive.examples.components.c3d.adl.compositeOfDispRend</screen>
        <para>
            If you want to start only a User, you will be asked for the
            address of a Dispatcher to which to connect to:
        </para>
        <screen>examples/c3d$ ./c3d_component.sh \
../../../descriptors/components/C3D_all.xml \
org.objectweb.proactive.examples.components.c3d.adl.UserImpl</screen>
        </section>

    </section>
   <section xml:id="Conclusion_61"><info><title>Conclusion</title></info>

         <para>These are some examples amongst all the ProActive examples present in the ProActive
         distribution. To see a full list of examples, please refer to
         the
         <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/index.php?page=applications">
         application</link> web page.</para>
   </section>

</chapter>
