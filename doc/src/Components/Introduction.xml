<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ComponentsIntroduction">
<info>
<title xml:id="Introduction_52">Introduction</title>
	</info>
	<indexterm>
		<primary>Component</primary>
	</indexterm>

	<section xml:id="Overview_52"><info><title>Overview</title></info>

		<para>
			Computing Grids and Peer-to-Peer networks are inherently
			heterogeneous and distributed, and for this reason they present
			new technological challenges: complexity in the design of
			applications, complexity of deployment, reusability, and
			performance issues.
		</para>

		<para>
			The objective of this work is to provide an answer to these
			problems through the implementation for ProActive of an
			extensible, dynamical and hierarchical component model, Grid
			Component Model (GCM) based on
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://fractal.objectweb.org">
				Fractal
			</link>. The GCM was defined by the
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.coregrid.net/">
				CoreGRID NoE project
			</link> and standardized by
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.etsi.org/WebSite/homepage.aspx">
				ETSI
			</link>. The complete GCM specification is available
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.coregrid.net/mambo/images/stories/Deliverables/d.pm.04.pdf">
				here
			</link> and the GCM standards are available on the ETSI web site:
			<itemizedlist>
				<listitem>
					<para>
						<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://webapp.etsi.org/workprogram/Report_WorkItem.asp?WKI_ID=28857">
							GCM Fractal Management API
						</link>
					</para>
				</listitem>
				<listitem>
					<para>
						<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://webapp.etsi.org/workprogram/Report_WorkItem.asp?WKI_ID=28856">
							GCM Fractal Architecture Description Language
						</link>
					</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			This part documents the ProActive/GCM reference implementation
			developed by the
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://gridcomp.ercim.org/">
				GridCOMP European project
			</link>.
		</para>
	</section>

	<section xml:id="ProgrammingwithcomponentstheFractalcomponentmodel_52"><info><title>Programming with components: the Fractal component model</title></info>

		<para>
			Fractal defines a general conceptual model, along with an Application
			Programming Interface (API) in Java. According to the official
			documentation, the Fractal component model is '<emphasis>a modular and
			extensible component model that can be used with various programming
			languages to design, implement, deploy and reconfigure various systems and
			applications, from operating systems to middleware platforms and to
			graphical user interfaces</emphasis>'.
		</para>

		<para>
			Fractal is a component model. A component is a software module offering predefined
			services, and able to communicate with other components. The Fractal component model
			is hierarchical, so components can either be primitives or composites. A composite
			is a component containing one or many inner components (primitive or composite). Each
			component may define what it needs and provides with its client and server interfaces.
			Furthermore, server interfaces may be functional interfaces or a non-functional
			interfaces (also called controllers or membrane). Controllers are useful to manage the
			component. For instance, the LifeCycleController allows to control the life cycle of
			the component and provides methods to start or stop the component.
		</para>

		<para>
			Here is a basic example of a system of Fractal components:
			<figure xml:id="AsystemofFractalcomponents_52"><info><title>A system of Fractal components</title></info>
				<mediaobject>
					<imageobject>
						<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/fractal.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>

      <para>
         Server interfaces, client interfaces and controllers are respectively represented in red, green and blue.
      </para>
		<para>
			In addition to that, Fractal defines an Architecture Description Language (ADL).
			The ADL uses an XML syntax and is a way to describe a component	based system
			without having to worry about the implementation code.
		</para>

		<para>
			The Fractal specification defines conformance levels for
			implementations of the API (section 7.1. of the Fractal 2
			specification).
		</para>

		<para>
			For a complete description of the Fractal component model, please refer
			to the Fractal specification, available
			<link xmlns:xlink="http://www.w3.org/1999/xlink"
				xlink:href="http://fractal.objectweb.org/specification/fractal-specification.pdf">
				here
			</link>.
		</para>

	</section>

	<section xml:id="PresentationofProActiveGCM_52"><info><title>Presentation of ProActive/GCM</title></info>

		<para>
			The Grid Component Model (GCM) defines a component model suitable
			to support the development of efficient grid applications. It
			implements the "invisible grid" concept: abstract away
			grid related implementation details (hardware, OS, authorization
			and security, load, failure, etc.) that usually require high
			programming efforts to be dealt with. Our implementation of the
			GCM is based on the ProActive library: components in this
			framework are implemented as active objects, and as a consequence
			benefit from the properties of the active object model. We named
			this implementation ProActive/GCM.
		</para>

		<para>
			Thus, the previous standard system of Fractal components becomes
			when distributed with ProActive/GCM:
			<figure xml:id="AsystemofdistributedProActiveGCMcomponentsblue_52"><info><title>A system of distributed ProActive/GCM components (blue, yellow and white represent distinct locations)</title></info>
				<mediaobject>
					<imageobject>
						<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/fractal-proactive-distributed.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>

		<para>
			The GCM is an extension of the Fractal specification, and it
			introduces the new features using a Fractal compliant terminology.
			The main features that have been developed to implements the
			GCM are:
                  </para>
			<itemizedlist>
			 <listitem>
				<para>
					The deployment: several	components in an assembly can be distributed on
					different nodes on several computers using transparent remote communication.
				</para>
			 </listitem>

			 <listitem>
				<para>
					The collective interfaces: component system designers
					are able to specify parallelism, synchronization and
					data distribution. Collective communications refer to multipoint
					interactions between software entities. Collective interfaces have
					two types of cardinalities, multicast and gathercast.
				</para>
			 </listitem>
			 </itemizedlist>


		<para>
			ProActive/GCM is conformant up to level 3.2.
			In other words, it is fully compliant with the API. Generic
			factories (template components) are provided as ADL templates.
			We are currently implementing a set of predefined standard
			conformance tests for the Fractal specification.
		</para>

		<para>
			To sum it up, ProActive/GCM mainly provides:
			<itemizedlist>
			 <listitem><para>
				Creation/usage of primitive and composite components
			</para> </listitem>

			 <listitem><para>
				Client, server and non-functional interfaces (single and collection cardinalities)
			 </para></listitem>

			 <listitem><para>
				ADL support</para>
			 </listitem>

			 <listitem> <para>
				A deployment framework </para>
			 </listitem>
			 </itemizedlist>
		</para>
	</section>

	<section xml:id="GCMBasics_52"><info><title>GCM Basics</title></info>
	<para>
		For starters, here is a very basic example demonstrating the
		separation between the code and the deployment of an application
		and also showing the simplicity with which the deployment can be
		modified.
	</para>

	<para>
		As shown in the diagram below, in the first step, The
		application is just composed of two primitive components
		distributed into a single Java Virtual Machine.
	</para>

	<mediaobject>
		<imageobject>
			<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/distributed_components.png" format="PNG"/>
		</imageobject>
	</mediaobject>

	<para>
		Now, in order to use two separate Java Virtual Machine, in the
		deployment descriptor file, the line:
	</para>
	<para>
		<programlisting language="xml">&lt;host id="localhost" os="unix" hostCapacity="1"
vmCapacity="2"&gt;</programlisting>
	</para>
	<para>is changed to:</para>
	<para>
		<programlisting language="xml">&lt;host id="localhost" os="unix" hostCapacity="2"
vmCapacity="1"&gt;</programlisting>
	</para>

	<para>
		Before changing the line, the deployment descriptor indicates
		that there will be 1 Java Virtual Machine with 2 nodes inside the
		JVM.
	</para>
	<para>
		Then, once the change made, the deployment descriptor specifies
		that there will be 2 Java Virtual Machines with 1 node per JVM:
	</para>

	<mediaobject>
		<imageobject>
			<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/png/2components_2jvms.png" format="PNG"/>
		</imageobject>
	</mediaobject>

	<para>
		All the source files are available at the end of the part in
		<xref linkend="ComponentsAppendix"/>.
	</para>
	</section>

	<!--
		<note>
		<para>For a general overview of this work, one can also refer to the paper
		<citation><xref endterm="BCM03.abbrev" linkend="BCM03"/></citation>.</para>

		<para>For more detailed information, one should refer to the PhD thesis
		"Components for Grid Computing" <citation><xref endterm="PhD-thesis-Morel.abbrev" linkend="M06"/></citation>, manuscript
		available <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www-sop.inria.fr/oasis/personnel/Matthieu.Morel/publications.html">here</link>
		(.pdf).</para>
		</note>
	-->
</chapter>
